// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MarketDataFeedV3.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MarketDataFeedV3_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MarketDataFeedV3_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MarketDataFeedV3_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MarketDataFeedV3_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MarketDataFeedV3_2eproto;
namespace upstox {
class Feed;
class FeedDefaultTypeInternal;
extern FeedDefaultTypeInternal _Feed_default_instance_;
class FeedResponse;
class FeedResponseDefaultTypeInternal;
extern FeedResponseDefaultTypeInternal _FeedResponse_default_instance_;
class FeedResponse_FeedsEntry_DoNotUse;
class FeedResponse_FeedsEntry_DoNotUseDefaultTypeInternal;
extern FeedResponse_FeedsEntry_DoNotUseDefaultTypeInternal _FeedResponse_FeedsEntry_DoNotUse_default_instance_;
class FirstLevelWithGreeks;
class FirstLevelWithGreeksDefaultTypeInternal;
extern FirstLevelWithGreeksDefaultTypeInternal _FirstLevelWithGreeks_default_instance_;
class FullFeed;
class FullFeedDefaultTypeInternal;
extern FullFeedDefaultTypeInternal _FullFeed_default_instance_;
class IndexFullFeed;
class IndexFullFeedDefaultTypeInternal;
extern IndexFullFeedDefaultTypeInternal _IndexFullFeed_default_instance_;
class LTPC;
class LTPCDefaultTypeInternal;
extern LTPCDefaultTypeInternal _LTPC_default_instance_;
class MarketFullFeed;
class MarketFullFeedDefaultTypeInternal;
extern MarketFullFeedDefaultTypeInternal _MarketFullFeed_default_instance_;
class MarketInfo;
class MarketInfoDefaultTypeInternal;
extern MarketInfoDefaultTypeInternal _MarketInfo_default_instance_;
class MarketInfo_SegmentStatusEntry_DoNotUse;
class MarketInfo_SegmentStatusEntry_DoNotUseDefaultTypeInternal;
extern MarketInfo_SegmentStatusEntry_DoNotUseDefaultTypeInternal _MarketInfo_SegmentStatusEntry_DoNotUse_default_instance_;
class MarketLevel;
class MarketLevelDefaultTypeInternal;
extern MarketLevelDefaultTypeInternal _MarketLevel_default_instance_;
class MarketOHLC;
class MarketOHLCDefaultTypeInternal;
extern MarketOHLCDefaultTypeInternal _MarketOHLC_default_instance_;
class OHLC;
class OHLCDefaultTypeInternal;
extern OHLCDefaultTypeInternal _OHLC_default_instance_;
class OptionGreeks;
class OptionGreeksDefaultTypeInternal;
extern OptionGreeksDefaultTypeInternal _OptionGreeks_default_instance_;
class Quote;
class QuoteDefaultTypeInternal;
extern QuoteDefaultTypeInternal _Quote_default_instance_;
}  // namespace upstox
PROTOBUF_NAMESPACE_OPEN
template<> ::upstox::Feed* Arena::CreateMaybeMessage<::upstox::Feed>(Arena*);
template<> ::upstox::FeedResponse* Arena::CreateMaybeMessage<::upstox::FeedResponse>(Arena*);
template<> ::upstox::FeedResponse_FeedsEntry_DoNotUse* Arena::CreateMaybeMessage<::upstox::FeedResponse_FeedsEntry_DoNotUse>(Arena*);
template<> ::upstox::FirstLevelWithGreeks* Arena::CreateMaybeMessage<::upstox::FirstLevelWithGreeks>(Arena*);
template<> ::upstox::FullFeed* Arena::CreateMaybeMessage<::upstox::FullFeed>(Arena*);
template<> ::upstox::IndexFullFeed* Arena::CreateMaybeMessage<::upstox::IndexFullFeed>(Arena*);
template<> ::upstox::LTPC* Arena::CreateMaybeMessage<::upstox::LTPC>(Arena*);
template<> ::upstox::MarketFullFeed* Arena::CreateMaybeMessage<::upstox::MarketFullFeed>(Arena*);
template<> ::upstox::MarketInfo* Arena::CreateMaybeMessage<::upstox::MarketInfo>(Arena*);
template<> ::upstox::MarketInfo_SegmentStatusEntry_DoNotUse* Arena::CreateMaybeMessage<::upstox::MarketInfo_SegmentStatusEntry_DoNotUse>(Arena*);
template<> ::upstox::MarketLevel* Arena::CreateMaybeMessage<::upstox::MarketLevel>(Arena*);
template<> ::upstox::MarketOHLC* Arena::CreateMaybeMessage<::upstox::MarketOHLC>(Arena*);
template<> ::upstox::OHLC* Arena::CreateMaybeMessage<::upstox::OHLC>(Arena*);
template<> ::upstox::OptionGreeks* Arena::CreateMaybeMessage<::upstox::OptionGreeks>(Arena*);
template<> ::upstox::Quote* Arena::CreateMaybeMessage<::upstox::Quote>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace upstox {

enum Type : int {
  initial_feed = 0,
  live_feed = 1,
  market_info = 2,
  Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Type_IsValid(int value);
constexpr Type Type_MIN = initial_feed;
constexpr Type Type_MAX = market_info;
constexpr int Type_ARRAYSIZE = Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor();
template<typename T>
inline const std::string& Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Type_descriptor(), enum_t_value);
}
inline bool Type_Parse(
    const std::string& name, Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
enum RequestMode : int {
  ltpc = 0,
  full_d5 = 1,
  option_greeks = 2,
  full_d30 = 3,
  RequestMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RequestMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RequestMode_IsValid(int value);
constexpr RequestMode RequestMode_MIN = ltpc;
constexpr RequestMode RequestMode_MAX = full_d30;
constexpr int RequestMode_ARRAYSIZE = RequestMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestMode_descriptor();
template<typename T>
inline const std::string& RequestMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RequestMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RequestMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RequestMode_descriptor(), enum_t_value);
}
inline bool RequestMode_Parse(
    const std::string& name, RequestMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RequestMode>(
    RequestMode_descriptor(), name, value);
}
enum MarketStatus : int {
  PRE_OPEN_START = 0,
  PRE_OPEN_END = 1,
  NORMAL_OPEN = 2,
  NORMAL_CLOSE = 3,
  CLOSING_START = 4,
  CLOSING_END = 5,
  MarketStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MarketStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MarketStatus_IsValid(int value);
constexpr MarketStatus MarketStatus_MIN = PRE_OPEN_START;
constexpr MarketStatus MarketStatus_MAX = CLOSING_END;
constexpr int MarketStatus_ARRAYSIZE = MarketStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MarketStatus_descriptor();
template<typename T>
inline const std::string& MarketStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MarketStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MarketStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MarketStatus_descriptor(), enum_t_value);
}
inline bool MarketStatus_Parse(
    const std::string& name, MarketStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MarketStatus>(
    MarketStatus_descriptor(), name, value);
}
// ===================================================================

class LTPC PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:upstox.LTPC) */ {
 public:
  inline LTPC() : LTPC(nullptr) {};
  virtual ~LTPC();

  LTPC(const LTPC& from);
  LTPC(LTPC&& from) noexcept
    : LTPC() {
    *this = ::std::move(from);
  }

  inline LTPC& operator=(const LTPC& from) {
    CopyFrom(from);
    return *this;
  }
  inline LTPC& operator=(LTPC&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LTPC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LTPC* internal_default_instance() {
    return reinterpret_cast<const LTPC*>(
               &_LTPC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LTPC& a, LTPC& b) {
    a.Swap(&b);
  }
  inline void Swap(LTPC* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LTPC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LTPC* New() const final {
    return CreateMaybeMessage<LTPC>(nullptr);
  }

  LTPC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LTPC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LTPC& from);
  void MergeFrom(const LTPC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LTPC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "upstox.LTPC";
  }
  protected:
  explicit LTPC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MarketDataFeedV3_2eproto);
    return ::descriptor_table_MarketDataFeedV3_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLtpFieldNumber = 1,
    kLttFieldNumber = 2,
    kCpFieldNumber = 3,
  };
  // double ltp = 1;
  void clear_ltp();
  double ltp() const;
  void set_ltp(double value);
  private:
  double _internal_ltp() const;
  void _internal_set_ltp(double value);
  public:

  // int64 ltt = 2;
  void clear_ltt();
  ::PROTOBUF_NAMESPACE_ID::int64 ltt() const;
  void set_ltt(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ltt() const;
  void _internal_set_ltt(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double cp = 3;
  void clear_cp();
  double cp() const;
  void set_cp(double value);
  private:
  double _internal_cp() const;
  void _internal_set_cp(double value);
  public:

  // @@protoc_insertion_point(class_scope:upstox.LTPC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double ltp_;
  ::PROTOBUF_NAMESPACE_ID::int64 ltt_;
  double cp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MarketDataFeedV3_2eproto;
};
// -------------------------------------------------------------------

class MarketLevel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:upstox.MarketLevel) */ {
 public:
  inline MarketLevel() : MarketLevel(nullptr) {};
  virtual ~MarketLevel();

  MarketLevel(const MarketLevel& from);
  MarketLevel(MarketLevel&& from) noexcept
    : MarketLevel() {
    *this = ::std::move(from);
  }

  inline MarketLevel& operator=(const MarketLevel& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketLevel& operator=(MarketLevel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketLevel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarketLevel* internal_default_instance() {
    return reinterpret_cast<const MarketLevel*>(
               &_MarketLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MarketLevel& a, MarketLevel& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketLevel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketLevel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketLevel* New() const final {
    return CreateMaybeMessage<MarketLevel>(nullptr);
  }

  MarketLevel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketLevel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketLevel& from);
  void MergeFrom(const MarketLevel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketLevel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "upstox.MarketLevel";
  }
  protected:
  explicit MarketLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MarketDataFeedV3_2eproto);
    return ::descriptor_table_MarketDataFeedV3_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBidAskQuoteFieldNumber = 1,
  };
  // repeated .upstox.Quote bidAskQuote = 1;
  int bidaskquote_size() const;
  private:
  int _internal_bidaskquote_size() const;
  public:
  void clear_bidaskquote();
  ::upstox::Quote* mutable_bidaskquote(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::upstox::Quote >*
      mutable_bidaskquote();
  private:
  const ::upstox::Quote& _internal_bidaskquote(int index) const;
  ::upstox::Quote* _internal_add_bidaskquote();
  public:
  const ::upstox::Quote& bidaskquote(int index) const;
  ::upstox::Quote* add_bidaskquote();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::upstox::Quote >&
      bidaskquote() const;

  // @@protoc_insertion_point(class_scope:upstox.MarketLevel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::upstox::Quote > bidaskquote_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MarketDataFeedV3_2eproto;
};
// -------------------------------------------------------------------

class MarketOHLC PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:upstox.MarketOHLC) */ {
 public:
  inline MarketOHLC() : MarketOHLC(nullptr) {};
  virtual ~MarketOHLC();

  MarketOHLC(const MarketOHLC& from);
  MarketOHLC(MarketOHLC&& from) noexcept
    : MarketOHLC() {
    *this = ::std::move(from);
  }

  inline MarketOHLC& operator=(const MarketOHLC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketOHLC& operator=(MarketOHLC&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketOHLC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarketOHLC* internal_default_instance() {
    return reinterpret_cast<const MarketOHLC*>(
               &_MarketOHLC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MarketOHLC& a, MarketOHLC& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketOHLC* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketOHLC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketOHLC* New() const final {
    return CreateMaybeMessage<MarketOHLC>(nullptr);
  }

  MarketOHLC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketOHLC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketOHLC& from);
  void MergeFrom(const MarketOHLC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketOHLC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "upstox.MarketOHLC";
  }
  protected:
  explicit MarketOHLC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MarketDataFeedV3_2eproto);
    return ::descriptor_table_MarketDataFeedV3_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOhlcFieldNumber = 1,
  };
  // repeated .upstox.OHLC ohlc = 1;
  int ohlc_size() const;
  private:
  int _internal_ohlc_size() const;
  public:
  void clear_ohlc();
  ::upstox::OHLC* mutable_ohlc(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::upstox::OHLC >*
      mutable_ohlc();
  private:
  const ::upstox::OHLC& _internal_ohlc(int index) const;
  ::upstox::OHLC* _internal_add_ohlc();
  public:
  const ::upstox::OHLC& ohlc(int index) const;
  ::upstox::OHLC* add_ohlc();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::upstox::OHLC >&
      ohlc() const;

  // @@protoc_insertion_point(class_scope:upstox.MarketOHLC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::upstox::OHLC > ohlc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MarketDataFeedV3_2eproto;
};
// -------------------------------------------------------------------

class Quote PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:upstox.Quote) */ {
 public:
  inline Quote() : Quote(nullptr) {};
  virtual ~Quote();

  Quote(const Quote& from);
  Quote(Quote&& from) noexcept
    : Quote() {
    *this = ::std::move(from);
  }

  inline Quote& operator=(const Quote& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quote& operator=(Quote&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Quote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Quote* internal_default_instance() {
    return reinterpret_cast<const Quote*>(
               &_Quote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Quote& a, Quote& b) {
    a.Swap(&b);
  }
  inline void Swap(Quote* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Quote* New() const final {
    return CreateMaybeMessage<Quote>(nullptr);
  }

  Quote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Quote>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Quote& from);
  void MergeFrom(const Quote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "upstox.Quote";
  }
  protected:
  explicit Quote(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MarketDataFeedV3_2eproto);
    return ::descriptor_table_MarketDataFeedV3_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBidQFieldNumber = 1,
    kBidPFieldNumber = 2,
    kAskQFieldNumber = 3,
    kAskPFieldNumber = 4,
  };
  // int64 bidQ = 1;
  void clear_bidq();
  ::PROTOBUF_NAMESPACE_ID::int64 bidq() const;
  void set_bidq(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_bidq() const;
  void _internal_set_bidq(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double bidP = 2;
  void clear_bidp();
  double bidp() const;
  void set_bidp(double value);
  private:
  double _internal_bidp() const;
  void _internal_set_bidp(double value);
  public:

  // int64 askQ = 3;
  void clear_askq();
  ::PROTOBUF_NAMESPACE_ID::int64 askq() const;
  void set_askq(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_askq() const;
  void _internal_set_askq(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double askP = 4;
  void clear_askp();
  double askp() const;
  void set_askp(double value);
  private:
  double _internal_askp() const;
  void _internal_set_askp(double value);
  public:

  // @@protoc_insertion_point(class_scope:upstox.Quote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 bidq_;
  double bidp_;
  ::PROTOBUF_NAMESPACE_ID::int64 askq_;
  double askp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MarketDataFeedV3_2eproto;
};
// -------------------------------------------------------------------

class OptionGreeks PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:upstox.OptionGreeks) */ {
 public:
  inline OptionGreeks() : OptionGreeks(nullptr) {};
  virtual ~OptionGreeks();

  OptionGreeks(const OptionGreeks& from);
  OptionGreeks(OptionGreeks&& from) noexcept
    : OptionGreeks() {
    *this = ::std::move(from);
  }

  inline OptionGreeks& operator=(const OptionGreeks& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionGreeks& operator=(OptionGreeks&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OptionGreeks& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionGreeks* internal_default_instance() {
    return reinterpret_cast<const OptionGreeks*>(
               &_OptionGreeks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OptionGreeks& a, OptionGreeks& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionGreeks* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionGreeks* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptionGreeks* New() const final {
    return CreateMaybeMessage<OptionGreeks>(nullptr);
  }

  OptionGreeks* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptionGreeks>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OptionGreeks& from);
  void MergeFrom(const OptionGreeks& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionGreeks* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "upstox.OptionGreeks";
  }
  protected:
  explicit OptionGreeks(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MarketDataFeedV3_2eproto);
    return ::descriptor_table_MarketDataFeedV3_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeltaFieldNumber = 1,
    kThetaFieldNumber = 2,
    kGammaFieldNumber = 3,
    kVegaFieldNumber = 4,
    kRhoFieldNumber = 5,
  };
  // double delta = 1;
  void clear_delta();
  double delta() const;
  void set_delta(double value);
  private:
  double _internal_delta() const;
  void _internal_set_delta(double value);
  public:

  // double theta = 2;
  void clear_theta();
  double theta() const;
  void set_theta(double value);
  private:
  double _internal_theta() const;
  void _internal_set_theta(double value);
  public:

  // double gamma = 3;
  void clear_gamma();
  double gamma() const;
  void set_gamma(double value);
  private:
  double _internal_gamma() const;
  void _internal_set_gamma(double value);
  public:

  // double vega = 4;
  void clear_vega();
  double vega() const;
  void set_vega(double value);
  private:
  double _internal_vega() const;
  void _internal_set_vega(double value);
  public:

  // double rho = 5;
  void clear_rho();
  double rho() const;
  void set_rho(double value);
  private:
  double _internal_rho() const;
  void _internal_set_rho(double value);
  public:

  // @@protoc_insertion_point(class_scope:upstox.OptionGreeks)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double delta_;
  double theta_;
  double gamma_;
  double vega_;
  double rho_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MarketDataFeedV3_2eproto;
};
// -------------------------------------------------------------------

class OHLC PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:upstox.OHLC) */ {
 public:
  inline OHLC() : OHLC(nullptr) {};
  virtual ~OHLC();

  OHLC(const OHLC& from);
  OHLC(OHLC&& from) noexcept
    : OHLC() {
    *this = ::std::move(from);
  }

  inline OHLC& operator=(const OHLC& from) {
    CopyFrom(from);
    return *this;
  }
  inline OHLC& operator=(OHLC&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OHLC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OHLC* internal_default_instance() {
    return reinterpret_cast<const OHLC*>(
               &_OHLC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OHLC& a, OHLC& b) {
    a.Swap(&b);
  }
  inline void Swap(OHLC* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OHLC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OHLC* New() const final {
    return CreateMaybeMessage<OHLC>(nullptr);
  }

  OHLC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OHLC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OHLC& from);
  void MergeFrom(const OHLC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OHLC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "upstox.OHLC";
  }
  protected:
  explicit OHLC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MarketDataFeedV3_2eproto);
    return ::descriptor_table_MarketDataFeedV3_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntervalFieldNumber = 1,
    kOpenFieldNumber = 2,
    kHighFieldNumber = 3,
    kLowFieldNumber = 4,
    kCloseFieldNumber = 5,
    kVolFieldNumber = 6,
    kTsFieldNumber = 7,
  };
  // string interval = 1;
  void clear_interval();
  const std::string& interval() const;
  void set_interval(const std::string& value);
  void set_interval(std::string&& value);
  void set_interval(const char* value);
  void set_interval(const char* value, size_t size);
  std::string* mutable_interval();
  std::string* release_interval();
  void set_allocated_interval(std::string* interval);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_interval();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_interval(
      std::string* interval);
  private:
  const std::string& _internal_interval() const;
  void _internal_set_interval(const std::string& value);
  std::string* _internal_mutable_interval();
  public:

  // double open = 2;
  void clear_open();
  double open() const;
  void set_open(double value);
  private:
  double _internal_open() const;
  void _internal_set_open(double value);
  public:

  // double high = 3;
  void clear_high();
  double high() const;
  void set_high(double value);
  private:
  double _internal_high() const;
  void _internal_set_high(double value);
  public:

  // double low = 4;
  void clear_low();
  double low() const;
  void set_low(double value);
  private:
  double _internal_low() const;
  void _internal_set_low(double value);
  public:

  // double close = 5;
  void clear_close();
  double close() const;
  void set_close(double value);
  private:
  double _internal_close() const;
  void _internal_set_close(double value);
  public:

  // int64 vol = 6;
  void clear_vol();
  ::PROTOBUF_NAMESPACE_ID::int64 vol() const;
  void set_vol(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_vol() const;
  void _internal_set_vol(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 ts = 7;
  void clear_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 ts() const;
  void set_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ts() const;
  void _internal_set_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:upstox.OHLC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interval_;
  double open_;
  double high_;
  double low_;
  double close_;
  ::PROTOBUF_NAMESPACE_ID::int64 vol_;
  ::PROTOBUF_NAMESPACE_ID::int64 ts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MarketDataFeedV3_2eproto;
};
// -------------------------------------------------------------------

class MarketFullFeed PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:upstox.MarketFullFeed) */ {
 public:
  inline MarketFullFeed() : MarketFullFeed(nullptr) {};
  virtual ~MarketFullFeed();

  MarketFullFeed(const MarketFullFeed& from);
  MarketFullFeed(MarketFullFeed&& from) noexcept
    : MarketFullFeed() {
    *this = ::std::move(from);
  }

  inline MarketFullFeed& operator=(const MarketFullFeed& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketFullFeed& operator=(MarketFullFeed&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketFullFeed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarketFullFeed* internal_default_instance() {
    return reinterpret_cast<const MarketFullFeed*>(
               &_MarketFullFeed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MarketFullFeed& a, MarketFullFeed& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketFullFeed* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketFullFeed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketFullFeed* New() const final {
    return CreateMaybeMessage<MarketFullFeed>(nullptr);
  }

  MarketFullFeed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketFullFeed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketFullFeed& from);
  void MergeFrom(const MarketFullFeed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketFullFeed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "upstox.MarketFullFeed";
  }
  protected:
  explicit MarketFullFeed(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MarketDataFeedV3_2eproto);
    return ::descriptor_table_MarketDataFeedV3_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLtpcFieldNumber = 1,
    kMarketLevelFieldNumber = 2,
    kOptionGreeksFieldNumber = 3,
    kMarketOHLCFieldNumber = 4,
    kAtpFieldNumber = 5,
    kVttFieldNumber = 6,
    kOiFieldNumber = 7,
    kIvFieldNumber = 8,
    kTbqFieldNumber = 9,
    kTsqFieldNumber = 10,
  };
  // .upstox.LTPC ltpc = 1;
  bool has_ltpc() const;
  private:
  bool _internal_has_ltpc() const;
  public:
  void clear_ltpc();
  const ::upstox::LTPC& ltpc() const;
  ::upstox::LTPC* release_ltpc();
  ::upstox::LTPC* mutable_ltpc();
  void set_allocated_ltpc(::upstox::LTPC* ltpc);
  private:
  const ::upstox::LTPC& _internal_ltpc() const;
  ::upstox::LTPC* _internal_mutable_ltpc();
  public:
  void unsafe_arena_set_allocated_ltpc(
      ::upstox::LTPC* ltpc);
  ::upstox::LTPC* unsafe_arena_release_ltpc();

  // .upstox.MarketLevel marketLevel = 2;
  bool has_marketlevel() const;
  private:
  bool _internal_has_marketlevel() const;
  public:
  void clear_marketlevel();
  const ::upstox::MarketLevel& marketlevel() const;
  ::upstox::MarketLevel* release_marketlevel();
  ::upstox::MarketLevel* mutable_marketlevel();
  void set_allocated_marketlevel(::upstox::MarketLevel* marketlevel);
  private:
  const ::upstox::MarketLevel& _internal_marketlevel() const;
  ::upstox::MarketLevel* _internal_mutable_marketlevel();
  public:
  void unsafe_arena_set_allocated_marketlevel(
      ::upstox::MarketLevel* marketlevel);
  ::upstox::MarketLevel* unsafe_arena_release_marketlevel();

  // .upstox.OptionGreeks optionGreeks = 3;
  bool has_optiongreeks() const;
  private:
  bool _internal_has_optiongreeks() const;
  public:
  void clear_optiongreeks();
  const ::upstox::OptionGreeks& optiongreeks() const;
  ::upstox::OptionGreeks* release_optiongreeks();
  ::upstox::OptionGreeks* mutable_optiongreeks();
  void set_allocated_optiongreeks(::upstox::OptionGreeks* optiongreeks);
  private:
  const ::upstox::OptionGreeks& _internal_optiongreeks() const;
  ::upstox::OptionGreeks* _internal_mutable_optiongreeks();
  public:
  void unsafe_arena_set_allocated_optiongreeks(
      ::upstox::OptionGreeks* optiongreeks);
  ::upstox::OptionGreeks* unsafe_arena_release_optiongreeks();

  // .upstox.MarketOHLC marketOHLC = 4;
  bool has_marketohlc() const;
  private:
  bool _internal_has_marketohlc() const;
  public:
  void clear_marketohlc();
  const ::upstox::MarketOHLC& marketohlc() const;
  ::upstox::MarketOHLC* release_marketohlc();
  ::upstox::MarketOHLC* mutable_marketohlc();
  void set_allocated_marketohlc(::upstox::MarketOHLC* marketohlc);
  private:
  const ::upstox::MarketOHLC& _internal_marketohlc() const;
  ::upstox::MarketOHLC* _internal_mutable_marketohlc();
  public:
  void unsafe_arena_set_allocated_marketohlc(
      ::upstox::MarketOHLC* marketohlc);
  ::upstox::MarketOHLC* unsafe_arena_release_marketohlc();

  // double atp = 5;
  void clear_atp();
  double atp() const;
  void set_atp(double value);
  private:
  double _internal_atp() const;
  void _internal_set_atp(double value);
  public:

  // int64 vtt = 6;
  void clear_vtt();
  ::PROTOBUF_NAMESPACE_ID::int64 vtt() const;
  void set_vtt(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_vtt() const;
  void _internal_set_vtt(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double oi = 7;
  void clear_oi();
  double oi() const;
  void set_oi(double value);
  private:
  double _internal_oi() const;
  void _internal_set_oi(double value);
  public:

  // double iv = 8;
  void clear_iv();
  double iv() const;
  void set_iv(double value);
  private:
  double _internal_iv() const;
  void _internal_set_iv(double value);
  public:

  // double tbq = 9;
  void clear_tbq();
  double tbq() const;
  void set_tbq(double value);
  private:
  double _internal_tbq() const;
  void _internal_set_tbq(double value);
  public:

  // double tsq = 10;
  void clear_tsq();
  double tsq() const;
  void set_tsq(double value);
  private:
  double _internal_tsq() const;
  void _internal_set_tsq(double value);
  public:

  // @@protoc_insertion_point(class_scope:upstox.MarketFullFeed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::upstox::LTPC* ltpc_;
  ::upstox::MarketLevel* marketlevel_;
  ::upstox::OptionGreeks* optiongreeks_;
  ::upstox::MarketOHLC* marketohlc_;
  double atp_;
  ::PROTOBUF_NAMESPACE_ID::int64 vtt_;
  double oi_;
  double iv_;
  double tbq_;
  double tsq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MarketDataFeedV3_2eproto;
};
// -------------------------------------------------------------------

class IndexFullFeed PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:upstox.IndexFullFeed) */ {
 public:
  inline IndexFullFeed() : IndexFullFeed(nullptr) {};
  virtual ~IndexFullFeed();

  IndexFullFeed(const IndexFullFeed& from);
  IndexFullFeed(IndexFullFeed&& from) noexcept
    : IndexFullFeed() {
    *this = ::std::move(from);
  }

  inline IndexFullFeed& operator=(const IndexFullFeed& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexFullFeed& operator=(IndexFullFeed&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IndexFullFeed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IndexFullFeed* internal_default_instance() {
    return reinterpret_cast<const IndexFullFeed*>(
               &_IndexFullFeed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(IndexFullFeed& a, IndexFullFeed& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexFullFeed* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexFullFeed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IndexFullFeed* New() const final {
    return CreateMaybeMessage<IndexFullFeed>(nullptr);
  }

  IndexFullFeed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IndexFullFeed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IndexFullFeed& from);
  void MergeFrom(const IndexFullFeed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexFullFeed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "upstox.IndexFullFeed";
  }
  protected:
  explicit IndexFullFeed(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MarketDataFeedV3_2eproto);
    return ::descriptor_table_MarketDataFeedV3_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLtpcFieldNumber = 1,
    kMarketOHLCFieldNumber = 2,
  };
  // .upstox.LTPC ltpc = 1;
  bool has_ltpc() const;
  private:
  bool _internal_has_ltpc() const;
  public:
  void clear_ltpc();
  const ::upstox::LTPC& ltpc() const;
  ::upstox::LTPC* release_ltpc();
  ::upstox::LTPC* mutable_ltpc();
  void set_allocated_ltpc(::upstox::LTPC* ltpc);
  private:
  const ::upstox::LTPC& _internal_ltpc() const;
  ::upstox::LTPC* _internal_mutable_ltpc();
  public:
  void unsafe_arena_set_allocated_ltpc(
      ::upstox::LTPC* ltpc);
  ::upstox::LTPC* unsafe_arena_release_ltpc();

  // .upstox.MarketOHLC marketOHLC = 2;
  bool has_marketohlc() const;
  private:
  bool _internal_has_marketohlc() const;
  public:
  void clear_marketohlc();
  const ::upstox::MarketOHLC& marketohlc() const;
  ::upstox::MarketOHLC* release_marketohlc();
  ::upstox::MarketOHLC* mutable_marketohlc();
  void set_allocated_marketohlc(::upstox::MarketOHLC* marketohlc);
  private:
  const ::upstox::MarketOHLC& _internal_marketohlc() const;
  ::upstox::MarketOHLC* _internal_mutable_marketohlc();
  public:
  void unsafe_arena_set_allocated_marketohlc(
      ::upstox::MarketOHLC* marketohlc);
  ::upstox::MarketOHLC* unsafe_arena_release_marketohlc();

  // @@protoc_insertion_point(class_scope:upstox.IndexFullFeed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::upstox::LTPC* ltpc_;
  ::upstox::MarketOHLC* marketohlc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MarketDataFeedV3_2eproto;
};
// -------------------------------------------------------------------

class FullFeed PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:upstox.FullFeed) */ {
 public:
  inline FullFeed() : FullFeed(nullptr) {};
  virtual ~FullFeed();

  FullFeed(const FullFeed& from);
  FullFeed(FullFeed&& from) noexcept
    : FullFeed() {
    *this = ::std::move(from);
  }

  inline FullFeed& operator=(const FullFeed& from) {
    CopyFrom(from);
    return *this;
  }
  inline FullFeed& operator=(FullFeed&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FullFeed& default_instance();

  enum FullFeedUnionCase {
    kMarketFF = 1,
    kIndexFF = 2,
    FULLFEEDUNION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FullFeed* internal_default_instance() {
    return reinterpret_cast<const FullFeed*>(
               &_FullFeed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FullFeed& a, FullFeed& b) {
    a.Swap(&b);
  }
  inline void Swap(FullFeed* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FullFeed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FullFeed* New() const final {
    return CreateMaybeMessage<FullFeed>(nullptr);
  }

  FullFeed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FullFeed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FullFeed& from);
  void MergeFrom(const FullFeed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FullFeed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "upstox.FullFeed";
  }
  protected:
  explicit FullFeed(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MarketDataFeedV3_2eproto);
    return ::descriptor_table_MarketDataFeedV3_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketFFFieldNumber = 1,
    kIndexFFFieldNumber = 2,
  };
  // .upstox.MarketFullFeed marketFF = 1;
  bool has_marketff() const;
  private:
  bool _internal_has_marketff() const;
  public:
  void clear_marketff();
  const ::upstox::MarketFullFeed& marketff() const;
  ::upstox::MarketFullFeed* release_marketff();
  ::upstox::MarketFullFeed* mutable_marketff();
  void set_allocated_marketff(::upstox::MarketFullFeed* marketff);
  private:
  const ::upstox::MarketFullFeed& _internal_marketff() const;
  ::upstox::MarketFullFeed* _internal_mutable_marketff();
  public:
  void unsafe_arena_set_allocated_marketff(
      ::upstox::MarketFullFeed* marketff);
  ::upstox::MarketFullFeed* unsafe_arena_release_marketff();

  // .upstox.IndexFullFeed indexFF = 2;
  bool has_indexff() const;
  private:
  bool _internal_has_indexff() const;
  public:
  void clear_indexff();
  const ::upstox::IndexFullFeed& indexff() const;
  ::upstox::IndexFullFeed* release_indexff();
  ::upstox::IndexFullFeed* mutable_indexff();
  void set_allocated_indexff(::upstox::IndexFullFeed* indexff);
  private:
  const ::upstox::IndexFullFeed& _internal_indexff() const;
  ::upstox::IndexFullFeed* _internal_mutable_indexff();
  public:
  void unsafe_arena_set_allocated_indexff(
      ::upstox::IndexFullFeed* indexff);
  ::upstox::IndexFullFeed* unsafe_arena_release_indexff();

  void clear_FullFeedUnion();
  FullFeedUnionCase FullFeedUnion_case() const;
  // @@protoc_insertion_point(class_scope:upstox.FullFeed)
 private:
  class _Internal;
  void set_has_marketff();
  void set_has_indexff();

  inline bool has_FullFeedUnion() const;
  inline void clear_has_FullFeedUnion();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union FullFeedUnionUnion {
    FullFeedUnionUnion() {}
    ::upstox::MarketFullFeed* marketff_;
    ::upstox::IndexFullFeed* indexff_;
  } FullFeedUnion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_MarketDataFeedV3_2eproto;
};
// -------------------------------------------------------------------

class FirstLevelWithGreeks PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:upstox.FirstLevelWithGreeks) */ {
 public:
  inline FirstLevelWithGreeks() : FirstLevelWithGreeks(nullptr) {};
  virtual ~FirstLevelWithGreeks();

  FirstLevelWithGreeks(const FirstLevelWithGreeks& from);
  FirstLevelWithGreeks(FirstLevelWithGreeks&& from) noexcept
    : FirstLevelWithGreeks() {
    *this = ::std::move(from);
  }

  inline FirstLevelWithGreeks& operator=(const FirstLevelWithGreeks& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirstLevelWithGreeks& operator=(FirstLevelWithGreeks&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirstLevelWithGreeks& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirstLevelWithGreeks* internal_default_instance() {
    return reinterpret_cast<const FirstLevelWithGreeks*>(
               &_FirstLevelWithGreeks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FirstLevelWithGreeks& a, FirstLevelWithGreeks& b) {
    a.Swap(&b);
  }
  inline void Swap(FirstLevelWithGreeks* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FirstLevelWithGreeks* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirstLevelWithGreeks* New() const final {
    return CreateMaybeMessage<FirstLevelWithGreeks>(nullptr);
  }

  FirstLevelWithGreeks* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirstLevelWithGreeks>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirstLevelWithGreeks& from);
  void MergeFrom(const FirstLevelWithGreeks& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirstLevelWithGreeks* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "upstox.FirstLevelWithGreeks";
  }
  protected:
  explicit FirstLevelWithGreeks(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MarketDataFeedV3_2eproto);
    return ::descriptor_table_MarketDataFeedV3_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLtpcFieldNumber = 1,
    kFirstDepthFieldNumber = 2,
    kOptionGreeksFieldNumber = 3,
    kVttFieldNumber = 4,
    kOiFieldNumber = 5,
    kIvFieldNumber = 6,
  };
  // .upstox.LTPC ltpc = 1;
  bool has_ltpc() const;
  private:
  bool _internal_has_ltpc() const;
  public:
  void clear_ltpc();
  const ::upstox::LTPC& ltpc() const;
  ::upstox::LTPC* release_ltpc();
  ::upstox::LTPC* mutable_ltpc();
  void set_allocated_ltpc(::upstox::LTPC* ltpc);
  private:
  const ::upstox::LTPC& _internal_ltpc() const;
  ::upstox::LTPC* _internal_mutable_ltpc();
  public:
  void unsafe_arena_set_allocated_ltpc(
      ::upstox::LTPC* ltpc);
  ::upstox::LTPC* unsafe_arena_release_ltpc();

  // .upstox.Quote firstDepth = 2;
  bool has_firstdepth() const;
  private:
  bool _internal_has_firstdepth() const;
  public:
  void clear_firstdepth();
  const ::upstox::Quote& firstdepth() const;
  ::upstox::Quote* release_firstdepth();
  ::upstox::Quote* mutable_firstdepth();
  void set_allocated_firstdepth(::upstox::Quote* firstdepth);
  private:
  const ::upstox::Quote& _internal_firstdepth() const;
  ::upstox::Quote* _internal_mutable_firstdepth();
  public:
  void unsafe_arena_set_allocated_firstdepth(
      ::upstox::Quote* firstdepth);
  ::upstox::Quote* unsafe_arena_release_firstdepth();

  // .upstox.OptionGreeks optionGreeks = 3;
  bool has_optiongreeks() const;
  private:
  bool _internal_has_optiongreeks() const;
  public:
  void clear_optiongreeks();
  const ::upstox::OptionGreeks& optiongreeks() const;
  ::upstox::OptionGreeks* release_optiongreeks();
  ::upstox::OptionGreeks* mutable_optiongreeks();
  void set_allocated_optiongreeks(::upstox::OptionGreeks* optiongreeks);
  private:
  const ::upstox::OptionGreeks& _internal_optiongreeks() const;
  ::upstox::OptionGreeks* _internal_mutable_optiongreeks();
  public:
  void unsafe_arena_set_allocated_optiongreeks(
      ::upstox::OptionGreeks* optiongreeks);
  ::upstox::OptionGreeks* unsafe_arena_release_optiongreeks();

  // int64 vtt = 4;
  void clear_vtt();
  ::PROTOBUF_NAMESPACE_ID::int64 vtt() const;
  void set_vtt(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_vtt() const;
  void _internal_set_vtt(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double oi = 5;
  void clear_oi();
  double oi() const;
  void set_oi(double value);
  private:
  double _internal_oi() const;
  void _internal_set_oi(double value);
  public:

  // double iv = 6;
  void clear_iv();
  double iv() const;
  void set_iv(double value);
  private:
  double _internal_iv() const;
  void _internal_set_iv(double value);
  public:

  // @@protoc_insertion_point(class_scope:upstox.FirstLevelWithGreeks)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::upstox::LTPC* ltpc_;
  ::upstox::Quote* firstdepth_;
  ::upstox::OptionGreeks* optiongreeks_;
  ::PROTOBUF_NAMESPACE_ID::int64 vtt_;
  double oi_;
  double iv_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MarketDataFeedV3_2eproto;
};
// -------------------------------------------------------------------

class Feed PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:upstox.Feed) */ {
 public:
  inline Feed() : Feed(nullptr) {};
  virtual ~Feed();

  Feed(const Feed& from);
  Feed(Feed&& from) noexcept
    : Feed() {
    *this = ::std::move(from);
  }

  inline Feed& operator=(const Feed& from) {
    CopyFrom(from);
    return *this;
  }
  inline Feed& operator=(Feed&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Feed& default_instance();

  enum FeedUnionCase {
    kLtpc = 1,
    kFullFeed = 2,
    kFirstLevelWithGreeks = 3,
    FEEDUNION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Feed* internal_default_instance() {
    return reinterpret_cast<const Feed*>(
               &_Feed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Feed& a, Feed& b) {
    a.Swap(&b);
  }
  inline void Swap(Feed* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Feed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Feed* New() const final {
    return CreateMaybeMessage<Feed>(nullptr);
  }

  Feed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Feed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Feed& from);
  void MergeFrom(const Feed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Feed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "upstox.Feed";
  }
  protected:
  explicit Feed(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MarketDataFeedV3_2eproto);
    return ::descriptor_table_MarketDataFeedV3_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestModeFieldNumber = 4,
    kLtpcFieldNumber = 1,
    kFullFeedFieldNumber = 2,
    kFirstLevelWithGreeksFieldNumber = 3,
  };
  // .upstox.RequestMode requestMode = 4;
  void clear_requestmode();
  ::upstox::RequestMode requestmode() const;
  void set_requestmode(::upstox::RequestMode value);
  private:
  ::upstox::RequestMode _internal_requestmode() const;
  void _internal_set_requestmode(::upstox::RequestMode value);
  public:

  // .upstox.LTPC ltpc = 1;
  bool has_ltpc() const;
  private:
  bool _internal_has_ltpc() const;
  public:
  void clear_ltpc();
  const ::upstox::LTPC& ltpc() const;
  ::upstox::LTPC* release_ltpc();
  ::upstox::LTPC* mutable_ltpc();
  void set_allocated_ltpc(::upstox::LTPC* ltpc);
  private:
  const ::upstox::LTPC& _internal_ltpc() const;
  ::upstox::LTPC* _internal_mutable_ltpc();
  public:
  void unsafe_arena_set_allocated_ltpc(
      ::upstox::LTPC* ltpc);
  ::upstox::LTPC* unsafe_arena_release_ltpc();

  // .upstox.FullFeed fullFeed = 2;
  bool has_fullfeed() const;
  private:
  bool _internal_has_fullfeed() const;
  public:
  void clear_fullfeed();
  const ::upstox::FullFeed& fullfeed() const;
  ::upstox::FullFeed* release_fullfeed();
  ::upstox::FullFeed* mutable_fullfeed();
  void set_allocated_fullfeed(::upstox::FullFeed* fullfeed);
  private:
  const ::upstox::FullFeed& _internal_fullfeed() const;
  ::upstox::FullFeed* _internal_mutable_fullfeed();
  public:
  void unsafe_arena_set_allocated_fullfeed(
      ::upstox::FullFeed* fullfeed);
  ::upstox::FullFeed* unsafe_arena_release_fullfeed();

  // .upstox.FirstLevelWithGreeks firstLevelWithGreeks = 3;
  bool has_firstlevelwithgreeks() const;
  private:
  bool _internal_has_firstlevelwithgreeks() const;
  public:
  void clear_firstlevelwithgreeks();
  const ::upstox::FirstLevelWithGreeks& firstlevelwithgreeks() const;
  ::upstox::FirstLevelWithGreeks* release_firstlevelwithgreeks();
  ::upstox::FirstLevelWithGreeks* mutable_firstlevelwithgreeks();
  void set_allocated_firstlevelwithgreeks(::upstox::FirstLevelWithGreeks* firstlevelwithgreeks);
  private:
  const ::upstox::FirstLevelWithGreeks& _internal_firstlevelwithgreeks() const;
  ::upstox::FirstLevelWithGreeks* _internal_mutable_firstlevelwithgreeks();
  public:
  void unsafe_arena_set_allocated_firstlevelwithgreeks(
      ::upstox::FirstLevelWithGreeks* firstlevelwithgreeks);
  ::upstox::FirstLevelWithGreeks* unsafe_arena_release_firstlevelwithgreeks();

  void clear_FeedUnion();
  FeedUnionCase FeedUnion_case() const;
  // @@protoc_insertion_point(class_scope:upstox.Feed)
 private:
  class _Internal;
  void set_has_ltpc();
  void set_has_fullfeed();
  void set_has_firstlevelwithgreeks();

  inline bool has_FeedUnion() const;
  inline void clear_has_FeedUnion();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int requestmode_;
  union FeedUnionUnion {
    FeedUnionUnion() {}
    ::upstox::LTPC* ltpc_;
    ::upstox::FullFeed* fullfeed_;
    ::upstox::FirstLevelWithGreeks* firstlevelwithgreeks_;
  } FeedUnion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_MarketDataFeedV3_2eproto;
};
// -------------------------------------------------------------------

class MarketInfo_SegmentStatusEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MarketInfo_SegmentStatusEntry_DoNotUse, 
    std::string, ::upstox::MarketStatus,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MarketInfo_SegmentStatusEntry_DoNotUse, 
    std::string, ::upstox::MarketStatus,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM,
    0 > SuperType;
  MarketInfo_SegmentStatusEntry_DoNotUse();
  MarketInfo_SegmentStatusEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MarketInfo_SegmentStatusEntry_DoNotUse& other);
  static const MarketInfo_SegmentStatusEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MarketInfo_SegmentStatusEntry_DoNotUse*>(&_MarketInfo_SegmentStatusEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "upstox.MarketInfo.SegmentStatusEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MarketDataFeedV3_2eproto);
    return ::descriptor_table_MarketDataFeedV3_2eproto.file_level_metadata[11];
  }

  public:
};

// -------------------------------------------------------------------

class MarketInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:upstox.MarketInfo) */ {
 public:
  inline MarketInfo() : MarketInfo(nullptr) {};
  virtual ~MarketInfo();

  MarketInfo(const MarketInfo& from);
  MarketInfo(MarketInfo&& from) noexcept
    : MarketInfo() {
    *this = ::std::move(from);
  }

  inline MarketInfo& operator=(const MarketInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketInfo& operator=(MarketInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarketInfo* internal_default_instance() {
    return reinterpret_cast<const MarketInfo*>(
               &_MarketInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MarketInfo& a, MarketInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketInfo* New() const final {
    return CreateMaybeMessage<MarketInfo>(nullptr);
  }

  MarketInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketInfo& from);
  void MergeFrom(const MarketInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "upstox.MarketInfo";
  }
  protected:
  explicit MarketInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MarketDataFeedV3_2eproto);
    return ::descriptor_table_MarketDataFeedV3_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSegmentStatusFieldNumber = 1,
  };
  // map<string, .upstox.MarketStatus> segmentStatus = 1;
  int segmentstatus_size() const;
  private:
  int _internal_segmentstatus_size() const;
  public:
  void clear_segmentstatus();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::upstox::MarketStatus >&
      _internal_segmentstatus() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::upstox::MarketStatus >*
      _internal_mutable_segmentstatus();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::upstox::MarketStatus >&
      segmentstatus() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::upstox::MarketStatus >*
      mutable_segmentstatus();

  // @@protoc_insertion_point(class_scope:upstox.MarketInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MarketInfo_SegmentStatusEntry_DoNotUse,
      std::string, ::upstox::MarketStatus,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM,
      0 > segmentstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MarketDataFeedV3_2eproto;
};
// -------------------------------------------------------------------

class FeedResponse_FeedsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FeedResponse_FeedsEntry_DoNotUse, 
    std::string, ::upstox::Feed,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FeedResponse_FeedsEntry_DoNotUse, 
    std::string, ::upstox::Feed,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  FeedResponse_FeedsEntry_DoNotUse();
  FeedResponse_FeedsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FeedResponse_FeedsEntry_DoNotUse& other);
  static const FeedResponse_FeedsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FeedResponse_FeedsEntry_DoNotUse*>(&_FeedResponse_FeedsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "upstox.FeedResponse.FeedsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MarketDataFeedV3_2eproto);
    return ::descriptor_table_MarketDataFeedV3_2eproto.file_level_metadata[13];
  }

  public:
};

// -------------------------------------------------------------------

class FeedResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:upstox.FeedResponse) */ {
 public:
  inline FeedResponse() : FeedResponse(nullptr) {};
  virtual ~FeedResponse();

  FeedResponse(const FeedResponse& from);
  FeedResponse(FeedResponse&& from) noexcept
    : FeedResponse() {
    *this = ::std::move(from);
  }

  inline FeedResponse& operator=(const FeedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeedResponse& operator=(FeedResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FeedResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeedResponse* internal_default_instance() {
    return reinterpret_cast<const FeedResponse*>(
               &_FeedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(FeedResponse& a, FeedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FeedResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeedResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FeedResponse* New() const final {
    return CreateMaybeMessage<FeedResponse>(nullptr);
  }

  FeedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FeedResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FeedResponse& from);
  void MergeFrom(const FeedResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeedResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "upstox.FeedResponse";
  }
  protected:
  explicit FeedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MarketDataFeedV3_2eproto);
    return ::descriptor_table_MarketDataFeedV3_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFeedsFieldNumber = 2,
    kMarketInfoFieldNumber = 4,
    kCurrentTsFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // map<string, .upstox.Feed> feeds = 2;
  int feeds_size() const;
  private:
  int _internal_feeds_size() const;
  public:
  void clear_feeds();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::upstox::Feed >&
      _internal_feeds() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::upstox::Feed >*
      _internal_mutable_feeds();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::upstox::Feed >&
      feeds() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::upstox::Feed >*
      mutable_feeds();

  // .upstox.MarketInfo marketInfo = 4;
  bool has_marketinfo() const;
  private:
  bool _internal_has_marketinfo() const;
  public:
  void clear_marketinfo();
  const ::upstox::MarketInfo& marketinfo() const;
  ::upstox::MarketInfo* release_marketinfo();
  ::upstox::MarketInfo* mutable_marketinfo();
  void set_allocated_marketinfo(::upstox::MarketInfo* marketinfo);
  private:
  const ::upstox::MarketInfo& _internal_marketinfo() const;
  ::upstox::MarketInfo* _internal_mutable_marketinfo();
  public:
  void unsafe_arena_set_allocated_marketinfo(
      ::upstox::MarketInfo* marketinfo);
  ::upstox::MarketInfo* unsafe_arena_release_marketinfo();

  // int64 currentTs = 3;
  void clear_currentts();
  ::PROTOBUF_NAMESPACE_ID::int64 currentts() const;
  void set_currentts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_currentts() const;
  void _internal_set_currentts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .upstox.Type type = 1;
  void clear_type();
  ::upstox::Type type() const;
  void set_type(::upstox::Type value);
  private:
  ::upstox::Type _internal_type() const;
  void _internal_set_type(::upstox::Type value);
  public:

  // @@protoc_insertion_point(class_scope:upstox.FeedResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      FeedResponse_FeedsEntry_DoNotUse,
      std::string, ::upstox::Feed,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > feeds_;
  ::upstox::MarketInfo* marketinfo_;
  ::PROTOBUF_NAMESPACE_ID::int64 currentts_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MarketDataFeedV3_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LTPC

// double ltp = 1;
inline void LTPC::clear_ltp() {
  ltp_ = 0;
}
inline double LTPC::_internal_ltp() const {
  return ltp_;
}
inline double LTPC::ltp() const {
  // @@protoc_insertion_point(field_get:upstox.LTPC.ltp)
  return _internal_ltp();
}
inline void LTPC::_internal_set_ltp(double value) {
  
  ltp_ = value;
}
inline void LTPC::set_ltp(double value) {
  _internal_set_ltp(value);
  // @@protoc_insertion_point(field_set:upstox.LTPC.ltp)
}

// int64 ltt = 2;
inline void LTPC::clear_ltt() {
  ltt_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LTPC::_internal_ltt() const {
  return ltt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LTPC::ltt() const {
  // @@protoc_insertion_point(field_get:upstox.LTPC.ltt)
  return _internal_ltt();
}
inline void LTPC::_internal_set_ltt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ltt_ = value;
}
inline void LTPC::set_ltt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ltt(value);
  // @@protoc_insertion_point(field_set:upstox.LTPC.ltt)
}

// double cp = 3;
inline void LTPC::clear_cp() {
  cp_ = 0;
}
inline double LTPC::_internal_cp() const {
  return cp_;
}
inline double LTPC::cp() const {
  // @@protoc_insertion_point(field_get:upstox.LTPC.cp)
  return _internal_cp();
}
inline void LTPC::_internal_set_cp(double value) {
  
  cp_ = value;
}
inline void LTPC::set_cp(double value) {
  _internal_set_cp(value);
  // @@protoc_insertion_point(field_set:upstox.LTPC.cp)
}

// -------------------------------------------------------------------

// MarketLevel

// repeated .upstox.Quote bidAskQuote = 1;
inline int MarketLevel::_internal_bidaskquote_size() const {
  return bidaskquote_.size();
}
inline int MarketLevel::bidaskquote_size() const {
  return _internal_bidaskquote_size();
}
inline void MarketLevel::clear_bidaskquote() {
  bidaskquote_.Clear();
}
inline ::upstox::Quote* MarketLevel::mutable_bidaskquote(int index) {
  // @@protoc_insertion_point(field_mutable:upstox.MarketLevel.bidAskQuote)
  return bidaskquote_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::upstox::Quote >*
MarketLevel::mutable_bidaskquote() {
  // @@protoc_insertion_point(field_mutable_list:upstox.MarketLevel.bidAskQuote)
  return &bidaskquote_;
}
inline const ::upstox::Quote& MarketLevel::_internal_bidaskquote(int index) const {
  return bidaskquote_.Get(index);
}
inline const ::upstox::Quote& MarketLevel::bidaskquote(int index) const {
  // @@protoc_insertion_point(field_get:upstox.MarketLevel.bidAskQuote)
  return _internal_bidaskquote(index);
}
inline ::upstox::Quote* MarketLevel::_internal_add_bidaskquote() {
  return bidaskquote_.Add();
}
inline ::upstox::Quote* MarketLevel::add_bidaskquote() {
  // @@protoc_insertion_point(field_add:upstox.MarketLevel.bidAskQuote)
  return _internal_add_bidaskquote();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::upstox::Quote >&
MarketLevel::bidaskquote() const {
  // @@protoc_insertion_point(field_list:upstox.MarketLevel.bidAskQuote)
  return bidaskquote_;
}

// -------------------------------------------------------------------

// MarketOHLC

// repeated .upstox.OHLC ohlc = 1;
inline int MarketOHLC::_internal_ohlc_size() const {
  return ohlc_.size();
}
inline int MarketOHLC::ohlc_size() const {
  return _internal_ohlc_size();
}
inline void MarketOHLC::clear_ohlc() {
  ohlc_.Clear();
}
inline ::upstox::OHLC* MarketOHLC::mutable_ohlc(int index) {
  // @@protoc_insertion_point(field_mutable:upstox.MarketOHLC.ohlc)
  return ohlc_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::upstox::OHLC >*
MarketOHLC::mutable_ohlc() {
  // @@protoc_insertion_point(field_mutable_list:upstox.MarketOHLC.ohlc)
  return &ohlc_;
}
inline const ::upstox::OHLC& MarketOHLC::_internal_ohlc(int index) const {
  return ohlc_.Get(index);
}
inline const ::upstox::OHLC& MarketOHLC::ohlc(int index) const {
  // @@protoc_insertion_point(field_get:upstox.MarketOHLC.ohlc)
  return _internal_ohlc(index);
}
inline ::upstox::OHLC* MarketOHLC::_internal_add_ohlc() {
  return ohlc_.Add();
}
inline ::upstox::OHLC* MarketOHLC::add_ohlc() {
  // @@protoc_insertion_point(field_add:upstox.MarketOHLC.ohlc)
  return _internal_add_ohlc();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::upstox::OHLC >&
MarketOHLC::ohlc() const {
  // @@protoc_insertion_point(field_list:upstox.MarketOHLC.ohlc)
  return ohlc_;
}

// -------------------------------------------------------------------

// Quote

// int64 bidQ = 1;
inline void Quote::clear_bidq() {
  bidq_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Quote::_internal_bidq() const {
  return bidq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Quote::bidq() const {
  // @@protoc_insertion_point(field_get:upstox.Quote.bidQ)
  return _internal_bidq();
}
inline void Quote::_internal_set_bidq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  bidq_ = value;
}
inline void Quote::set_bidq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_bidq(value);
  // @@protoc_insertion_point(field_set:upstox.Quote.bidQ)
}

// double bidP = 2;
inline void Quote::clear_bidp() {
  bidp_ = 0;
}
inline double Quote::_internal_bidp() const {
  return bidp_;
}
inline double Quote::bidp() const {
  // @@protoc_insertion_point(field_get:upstox.Quote.bidP)
  return _internal_bidp();
}
inline void Quote::_internal_set_bidp(double value) {
  
  bidp_ = value;
}
inline void Quote::set_bidp(double value) {
  _internal_set_bidp(value);
  // @@protoc_insertion_point(field_set:upstox.Quote.bidP)
}

// int64 askQ = 3;
inline void Quote::clear_askq() {
  askq_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Quote::_internal_askq() const {
  return askq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Quote::askq() const {
  // @@protoc_insertion_point(field_get:upstox.Quote.askQ)
  return _internal_askq();
}
inline void Quote::_internal_set_askq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  askq_ = value;
}
inline void Quote::set_askq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_askq(value);
  // @@protoc_insertion_point(field_set:upstox.Quote.askQ)
}

// double askP = 4;
inline void Quote::clear_askp() {
  askp_ = 0;
}
inline double Quote::_internal_askp() const {
  return askp_;
}
inline double Quote::askp() const {
  // @@protoc_insertion_point(field_get:upstox.Quote.askP)
  return _internal_askp();
}
inline void Quote::_internal_set_askp(double value) {
  
  askp_ = value;
}
inline void Quote::set_askp(double value) {
  _internal_set_askp(value);
  // @@protoc_insertion_point(field_set:upstox.Quote.askP)
}

// -------------------------------------------------------------------

// OptionGreeks

// double delta = 1;
inline void OptionGreeks::clear_delta() {
  delta_ = 0;
}
inline double OptionGreeks::_internal_delta() const {
  return delta_;
}
inline double OptionGreeks::delta() const {
  // @@protoc_insertion_point(field_get:upstox.OptionGreeks.delta)
  return _internal_delta();
}
inline void OptionGreeks::_internal_set_delta(double value) {
  
  delta_ = value;
}
inline void OptionGreeks::set_delta(double value) {
  _internal_set_delta(value);
  // @@protoc_insertion_point(field_set:upstox.OptionGreeks.delta)
}

// double theta = 2;
inline void OptionGreeks::clear_theta() {
  theta_ = 0;
}
inline double OptionGreeks::_internal_theta() const {
  return theta_;
}
inline double OptionGreeks::theta() const {
  // @@protoc_insertion_point(field_get:upstox.OptionGreeks.theta)
  return _internal_theta();
}
inline void OptionGreeks::_internal_set_theta(double value) {
  
  theta_ = value;
}
inline void OptionGreeks::set_theta(double value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:upstox.OptionGreeks.theta)
}

// double gamma = 3;
inline void OptionGreeks::clear_gamma() {
  gamma_ = 0;
}
inline double OptionGreeks::_internal_gamma() const {
  return gamma_;
}
inline double OptionGreeks::gamma() const {
  // @@protoc_insertion_point(field_get:upstox.OptionGreeks.gamma)
  return _internal_gamma();
}
inline void OptionGreeks::_internal_set_gamma(double value) {
  
  gamma_ = value;
}
inline void OptionGreeks::set_gamma(double value) {
  _internal_set_gamma(value);
  // @@protoc_insertion_point(field_set:upstox.OptionGreeks.gamma)
}

// double vega = 4;
inline void OptionGreeks::clear_vega() {
  vega_ = 0;
}
inline double OptionGreeks::_internal_vega() const {
  return vega_;
}
inline double OptionGreeks::vega() const {
  // @@protoc_insertion_point(field_get:upstox.OptionGreeks.vega)
  return _internal_vega();
}
inline void OptionGreeks::_internal_set_vega(double value) {
  
  vega_ = value;
}
inline void OptionGreeks::set_vega(double value) {
  _internal_set_vega(value);
  // @@protoc_insertion_point(field_set:upstox.OptionGreeks.vega)
}

// double rho = 5;
inline void OptionGreeks::clear_rho() {
  rho_ = 0;
}
inline double OptionGreeks::_internal_rho() const {
  return rho_;
}
inline double OptionGreeks::rho() const {
  // @@protoc_insertion_point(field_get:upstox.OptionGreeks.rho)
  return _internal_rho();
}
inline void OptionGreeks::_internal_set_rho(double value) {
  
  rho_ = value;
}
inline void OptionGreeks::set_rho(double value) {
  _internal_set_rho(value);
  // @@protoc_insertion_point(field_set:upstox.OptionGreeks.rho)
}

// -------------------------------------------------------------------

// OHLC

// string interval = 1;
inline void OHLC::clear_interval() {
  interval_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OHLC::interval() const {
  // @@protoc_insertion_point(field_get:upstox.OHLC.interval)
  return _internal_interval();
}
inline void OHLC::set_interval(const std::string& value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:upstox.OHLC.interval)
}
inline std::string* OHLC::mutable_interval() {
  // @@protoc_insertion_point(field_mutable:upstox.OHLC.interval)
  return _internal_mutable_interval();
}
inline const std::string& OHLC::_internal_interval() const {
  return interval_.Get();
}
inline void OHLC::_internal_set_interval(const std::string& value) {
  
  interval_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OHLC::set_interval(std::string&& value) {
  
  interval_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:upstox.OHLC.interval)
}
inline void OHLC::set_interval(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  interval_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:upstox.OHLC.interval)
}
inline void OHLC::set_interval(const char* value,
    size_t size) {
  
  interval_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:upstox.OHLC.interval)
}
inline std::string* OHLC::_internal_mutable_interval() {
  
  return interval_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OHLC::release_interval() {
  // @@protoc_insertion_point(field_release:upstox.OHLC.interval)
  return interval_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OHLC::set_allocated_interval(std::string* interval) {
  if (interval != nullptr) {
    
  } else {
    
  }
  interval_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), interval,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:upstox.OHLC.interval)
}
inline std::string* OHLC::unsafe_arena_release_interval() {
  // @@protoc_insertion_point(field_unsafe_arena_release:upstox.OHLC.interval)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return interval_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OHLC::unsafe_arena_set_allocated_interval(
    std::string* interval) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (interval != nullptr) {
    
  } else {
    
  }
  interval_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      interval, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:upstox.OHLC.interval)
}

// double open = 2;
inline void OHLC::clear_open() {
  open_ = 0;
}
inline double OHLC::_internal_open() const {
  return open_;
}
inline double OHLC::open() const {
  // @@protoc_insertion_point(field_get:upstox.OHLC.open)
  return _internal_open();
}
inline void OHLC::_internal_set_open(double value) {
  
  open_ = value;
}
inline void OHLC::set_open(double value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:upstox.OHLC.open)
}

// double high = 3;
inline void OHLC::clear_high() {
  high_ = 0;
}
inline double OHLC::_internal_high() const {
  return high_;
}
inline double OHLC::high() const {
  // @@protoc_insertion_point(field_get:upstox.OHLC.high)
  return _internal_high();
}
inline void OHLC::_internal_set_high(double value) {
  
  high_ = value;
}
inline void OHLC::set_high(double value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:upstox.OHLC.high)
}

// double low = 4;
inline void OHLC::clear_low() {
  low_ = 0;
}
inline double OHLC::_internal_low() const {
  return low_;
}
inline double OHLC::low() const {
  // @@protoc_insertion_point(field_get:upstox.OHLC.low)
  return _internal_low();
}
inline void OHLC::_internal_set_low(double value) {
  
  low_ = value;
}
inline void OHLC::set_low(double value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:upstox.OHLC.low)
}

// double close = 5;
inline void OHLC::clear_close() {
  close_ = 0;
}
inline double OHLC::_internal_close() const {
  return close_;
}
inline double OHLC::close() const {
  // @@protoc_insertion_point(field_get:upstox.OHLC.close)
  return _internal_close();
}
inline void OHLC::_internal_set_close(double value) {
  
  close_ = value;
}
inline void OHLC::set_close(double value) {
  _internal_set_close(value);
  // @@protoc_insertion_point(field_set:upstox.OHLC.close)
}

// int64 vol = 6;
inline void OHLC::clear_vol() {
  vol_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OHLC::_internal_vol() const {
  return vol_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OHLC::vol() const {
  // @@protoc_insertion_point(field_get:upstox.OHLC.vol)
  return _internal_vol();
}
inline void OHLC::_internal_set_vol(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  vol_ = value;
}
inline void OHLC::set_vol(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_vol(value);
  // @@protoc_insertion_point(field_set:upstox.OHLC.vol)
}

// int64 ts = 7;
inline void OHLC::clear_ts() {
  ts_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OHLC::_internal_ts() const {
  return ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OHLC::ts() const {
  // @@protoc_insertion_point(field_get:upstox.OHLC.ts)
  return _internal_ts();
}
inline void OHLC::_internal_set_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ts_ = value;
}
inline void OHLC::set_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:upstox.OHLC.ts)
}

// -------------------------------------------------------------------

// MarketFullFeed

// .upstox.LTPC ltpc = 1;
inline bool MarketFullFeed::_internal_has_ltpc() const {
  return this != internal_default_instance() && ltpc_ != nullptr;
}
inline bool MarketFullFeed::has_ltpc() const {
  return _internal_has_ltpc();
}
inline void MarketFullFeed::clear_ltpc() {
  if (GetArena() == nullptr && ltpc_ != nullptr) {
    delete ltpc_;
  }
  ltpc_ = nullptr;
}
inline const ::upstox::LTPC& MarketFullFeed::_internal_ltpc() const {
  const ::upstox::LTPC* p = ltpc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::upstox::LTPC*>(
      &::upstox::_LTPC_default_instance_);
}
inline const ::upstox::LTPC& MarketFullFeed::ltpc() const {
  // @@protoc_insertion_point(field_get:upstox.MarketFullFeed.ltpc)
  return _internal_ltpc();
}
inline void MarketFullFeed::unsafe_arena_set_allocated_ltpc(
    ::upstox::LTPC* ltpc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ltpc_);
  }
  ltpc_ = ltpc;
  if (ltpc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:upstox.MarketFullFeed.ltpc)
}
inline ::upstox::LTPC* MarketFullFeed::release_ltpc() {
  auto temp = unsafe_arena_release_ltpc();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::upstox::LTPC* MarketFullFeed::unsafe_arena_release_ltpc() {
  // @@protoc_insertion_point(field_release:upstox.MarketFullFeed.ltpc)
  
  ::upstox::LTPC* temp = ltpc_;
  ltpc_ = nullptr;
  return temp;
}
inline ::upstox::LTPC* MarketFullFeed::_internal_mutable_ltpc() {
  
  if (ltpc_ == nullptr) {
    auto* p = CreateMaybeMessage<::upstox::LTPC>(GetArena());
    ltpc_ = p;
  }
  return ltpc_;
}
inline ::upstox::LTPC* MarketFullFeed::mutable_ltpc() {
  // @@protoc_insertion_point(field_mutable:upstox.MarketFullFeed.ltpc)
  return _internal_mutable_ltpc();
}
inline void MarketFullFeed::set_allocated_ltpc(::upstox::LTPC* ltpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ltpc_;
  }
  if (ltpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ltpc);
    if (message_arena != submessage_arena) {
      ltpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ltpc, submessage_arena);
    }
    
  } else {
    
  }
  ltpc_ = ltpc;
  // @@protoc_insertion_point(field_set_allocated:upstox.MarketFullFeed.ltpc)
}

// .upstox.MarketLevel marketLevel = 2;
inline bool MarketFullFeed::_internal_has_marketlevel() const {
  return this != internal_default_instance() && marketlevel_ != nullptr;
}
inline bool MarketFullFeed::has_marketlevel() const {
  return _internal_has_marketlevel();
}
inline void MarketFullFeed::clear_marketlevel() {
  if (GetArena() == nullptr && marketlevel_ != nullptr) {
    delete marketlevel_;
  }
  marketlevel_ = nullptr;
}
inline const ::upstox::MarketLevel& MarketFullFeed::_internal_marketlevel() const {
  const ::upstox::MarketLevel* p = marketlevel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::upstox::MarketLevel*>(
      &::upstox::_MarketLevel_default_instance_);
}
inline const ::upstox::MarketLevel& MarketFullFeed::marketlevel() const {
  // @@protoc_insertion_point(field_get:upstox.MarketFullFeed.marketLevel)
  return _internal_marketlevel();
}
inline void MarketFullFeed::unsafe_arena_set_allocated_marketlevel(
    ::upstox::MarketLevel* marketlevel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(marketlevel_);
  }
  marketlevel_ = marketlevel;
  if (marketlevel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:upstox.MarketFullFeed.marketLevel)
}
inline ::upstox::MarketLevel* MarketFullFeed::release_marketlevel() {
  auto temp = unsafe_arena_release_marketlevel();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::upstox::MarketLevel* MarketFullFeed::unsafe_arena_release_marketlevel() {
  // @@protoc_insertion_point(field_release:upstox.MarketFullFeed.marketLevel)
  
  ::upstox::MarketLevel* temp = marketlevel_;
  marketlevel_ = nullptr;
  return temp;
}
inline ::upstox::MarketLevel* MarketFullFeed::_internal_mutable_marketlevel() {
  
  if (marketlevel_ == nullptr) {
    auto* p = CreateMaybeMessage<::upstox::MarketLevel>(GetArena());
    marketlevel_ = p;
  }
  return marketlevel_;
}
inline ::upstox::MarketLevel* MarketFullFeed::mutable_marketlevel() {
  // @@protoc_insertion_point(field_mutable:upstox.MarketFullFeed.marketLevel)
  return _internal_mutable_marketlevel();
}
inline void MarketFullFeed::set_allocated_marketlevel(::upstox::MarketLevel* marketlevel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete marketlevel_;
  }
  if (marketlevel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(marketlevel);
    if (message_arena != submessage_arena) {
      marketlevel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, marketlevel, submessage_arena);
    }
    
  } else {
    
  }
  marketlevel_ = marketlevel;
  // @@protoc_insertion_point(field_set_allocated:upstox.MarketFullFeed.marketLevel)
}

// .upstox.OptionGreeks optionGreeks = 3;
inline bool MarketFullFeed::_internal_has_optiongreeks() const {
  return this != internal_default_instance() && optiongreeks_ != nullptr;
}
inline bool MarketFullFeed::has_optiongreeks() const {
  return _internal_has_optiongreeks();
}
inline void MarketFullFeed::clear_optiongreeks() {
  if (GetArena() == nullptr && optiongreeks_ != nullptr) {
    delete optiongreeks_;
  }
  optiongreeks_ = nullptr;
}
inline const ::upstox::OptionGreeks& MarketFullFeed::_internal_optiongreeks() const {
  const ::upstox::OptionGreeks* p = optiongreeks_;
  return p != nullptr ? *p : *reinterpret_cast<const ::upstox::OptionGreeks*>(
      &::upstox::_OptionGreeks_default_instance_);
}
inline const ::upstox::OptionGreeks& MarketFullFeed::optiongreeks() const {
  // @@protoc_insertion_point(field_get:upstox.MarketFullFeed.optionGreeks)
  return _internal_optiongreeks();
}
inline void MarketFullFeed::unsafe_arena_set_allocated_optiongreeks(
    ::upstox::OptionGreeks* optiongreeks) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optiongreeks_);
  }
  optiongreeks_ = optiongreeks;
  if (optiongreeks) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:upstox.MarketFullFeed.optionGreeks)
}
inline ::upstox::OptionGreeks* MarketFullFeed::release_optiongreeks() {
  auto temp = unsafe_arena_release_optiongreeks();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::upstox::OptionGreeks* MarketFullFeed::unsafe_arena_release_optiongreeks() {
  // @@protoc_insertion_point(field_release:upstox.MarketFullFeed.optionGreeks)
  
  ::upstox::OptionGreeks* temp = optiongreeks_;
  optiongreeks_ = nullptr;
  return temp;
}
inline ::upstox::OptionGreeks* MarketFullFeed::_internal_mutable_optiongreeks() {
  
  if (optiongreeks_ == nullptr) {
    auto* p = CreateMaybeMessage<::upstox::OptionGreeks>(GetArena());
    optiongreeks_ = p;
  }
  return optiongreeks_;
}
inline ::upstox::OptionGreeks* MarketFullFeed::mutable_optiongreeks() {
  // @@protoc_insertion_point(field_mutable:upstox.MarketFullFeed.optionGreeks)
  return _internal_mutable_optiongreeks();
}
inline void MarketFullFeed::set_allocated_optiongreeks(::upstox::OptionGreeks* optiongreeks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete optiongreeks_;
  }
  if (optiongreeks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(optiongreeks);
    if (message_arena != submessage_arena) {
      optiongreeks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optiongreeks, submessage_arena);
    }
    
  } else {
    
  }
  optiongreeks_ = optiongreeks;
  // @@protoc_insertion_point(field_set_allocated:upstox.MarketFullFeed.optionGreeks)
}

// .upstox.MarketOHLC marketOHLC = 4;
inline bool MarketFullFeed::_internal_has_marketohlc() const {
  return this != internal_default_instance() && marketohlc_ != nullptr;
}
inline bool MarketFullFeed::has_marketohlc() const {
  return _internal_has_marketohlc();
}
inline void MarketFullFeed::clear_marketohlc() {
  if (GetArena() == nullptr && marketohlc_ != nullptr) {
    delete marketohlc_;
  }
  marketohlc_ = nullptr;
}
inline const ::upstox::MarketOHLC& MarketFullFeed::_internal_marketohlc() const {
  const ::upstox::MarketOHLC* p = marketohlc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::upstox::MarketOHLC*>(
      &::upstox::_MarketOHLC_default_instance_);
}
inline const ::upstox::MarketOHLC& MarketFullFeed::marketohlc() const {
  // @@protoc_insertion_point(field_get:upstox.MarketFullFeed.marketOHLC)
  return _internal_marketohlc();
}
inline void MarketFullFeed::unsafe_arena_set_allocated_marketohlc(
    ::upstox::MarketOHLC* marketohlc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(marketohlc_);
  }
  marketohlc_ = marketohlc;
  if (marketohlc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:upstox.MarketFullFeed.marketOHLC)
}
inline ::upstox::MarketOHLC* MarketFullFeed::release_marketohlc() {
  auto temp = unsafe_arena_release_marketohlc();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::upstox::MarketOHLC* MarketFullFeed::unsafe_arena_release_marketohlc() {
  // @@protoc_insertion_point(field_release:upstox.MarketFullFeed.marketOHLC)
  
  ::upstox::MarketOHLC* temp = marketohlc_;
  marketohlc_ = nullptr;
  return temp;
}
inline ::upstox::MarketOHLC* MarketFullFeed::_internal_mutable_marketohlc() {
  
  if (marketohlc_ == nullptr) {
    auto* p = CreateMaybeMessage<::upstox::MarketOHLC>(GetArena());
    marketohlc_ = p;
  }
  return marketohlc_;
}
inline ::upstox::MarketOHLC* MarketFullFeed::mutable_marketohlc() {
  // @@protoc_insertion_point(field_mutable:upstox.MarketFullFeed.marketOHLC)
  return _internal_mutable_marketohlc();
}
inline void MarketFullFeed::set_allocated_marketohlc(::upstox::MarketOHLC* marketohlc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete marketohlc_;
  }
  if (marketohlc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(marketohlc);
    if (message_arena != submessage_arena) {
      marketohlc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, marketohlc, submessage_arena);
    }
    
  } else {
    
  }
  marketohlc_ = marketohlc;
  // @@protoc_insertion_point(field_set_allocated:upstox.MarketFullFeed.marketOHLC)
}

// double atp = 5;
inline void MarketFullFeed::clear_atp() {
  atp_ = 0;
}
inline double MarketFullFeed::_internal_atp() const {
  return atp_;
}
inline double MarketFullFeed::atp() const {
  // @@protoc_insertion_point(field_get:upstox.MarketFullFeed.atp)
  return _internal_atp();
}
inline void MarketFullFeed::_internal_set_atp(double value) {
  
  atp_ = value;
}
inline void MarketFullFeed::set_atp(double value) {
  _internal_set_atp(value);
  // @@protoc_insertion_point(field_set:upstox.MarketFullFeed.atp)
}

// int64 vtt = 6;
inline void MarketFullFeed::clear_vtt() {
  vtt_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarketFullFeed::_internal_vtt() const {
  return vtt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarketFullFeed::vtt() const {
  // @@protoc_insertion_point(field_get:upstox.MarketFullFeed.vtt)
  return _internal_vtt();
}
inline void MarketFullFeed::_internal_set_vtt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  vtt_ = value;
}
inline void MarketFullFeed::set_vtt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_vtt(value);
  // @@protoc_insertion_point(field_set:upstox.MarketFullFeed.vtt)
}

// double oi = 7;
inline void MarketFullFeed::clear_oi() {
  oi_ = 0;
}
inline double MarketFullFeed::_internal_oi() const {
  return oi_;
}
inline double MarketFullFeed::oi() const {
  // @@protoc_insertion_point(field_get:upstox.MarketFullFeed.oi)
  return _internal_oi();
}
inline void MarketFullFeed::_internal_set_oi(double value) {
  
  oi_ = value;
}
inline void MarketFullFeed::set_oi(double value) {
  _internal_set_oi(value);
  // @@protoc_insertion_point(field_set:upstox.MarketFullFeed.oi)
}

// double iv = 8;
inline void MarketFullFeed::clear_iv() {
  iv_ = 0;
}
inline double MarketFullFeed::_internal_iv() const {
  return iv_;
}
inline double MarketFullFeed::iv() const {
  // @@protoc_insertion_point(field_get:upstox.MarketFullFeed.iv)
  return _internal_iv();
}
inline void MarketFullFeed::_internal_set_iv(double value) {
  
  iv_ = value;
}
inline void MarketFullFeed::set_iv(double value) {
  _internal_set_iv(value);
  // @@protoc_insertion_point(field_set:upstox.MarketFullFeed.iv)
}

// double tbq = 9;
inline void MarketFullFeed::clear_tbq() {
  tbq_ = 0;
}
inline double MarketFullFeed::_internal_tbq() const {
  return tbq_;
}
inline double MarketFullFeed::tbq() const {
  // @@protoc_insertion_point(field_get:upstox.MarketFullFeed.tbq)
  return _internal_tbq();
}
inline void MarketFullFeed::_internal_set_tbq(double value) {
  
  tbq_ = value;
}
inline void MarketFullFeed::set_tbq(double value) {
  _internal_set_tbq(value);
  // @@protoc_insertion_point(field_set:upstox.MarketFullFeed.tbq)
}

// double tsq = 10;
inline void MarketFullFeed::clear_tsq() {
  tsq_ = 0;
}
inline double MarketFullFeed::_internal_tsq() const {
  return tsq_;
}
inline double MarketFullFeed::tsq() const {
  // @@protoc_insertion_point(field_get:upstox.MarketFullFeed.tsq)
  return _internal_tsq();
}
inline void MarketFullFeed::_internal_set_tsq(double value) {
  
  tsq_ = value;
}
inline void MarketFullFeed::set_tsq(double value) {
  _internal_set_tsq(value);
  // @@protoc_insertion_point(field_set:upstox.MarketFullFeed.tsq)
}

// -------------------------------------------------------------------

// IndexFullFeed

// .upstox.LTPC ltpc = 1;
inline bool IndexFullFeed::_internal_has_ltpc() const {
  return this != internal_default_instance() && ltpc_ != nullptr;
}
inline bool IndexFullFeed::has_ltpc() const {
  return _internal_has_ltpc();
}
inline void IndexFullFeed::clear_ltpc() {
  if (GetArena() == nullptr && ltpc_ != nullptr) {
    delete ltpc_;
  }
  ltpc_ = nullptr;
}
inline const ::upstox::LTPC& IndexFullFeed::_internal_ltpc() const {
  const ::upstox::LTPC* p = ltpc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::upstox::LTPC*>(
      &::upstox::_LTPC_default_instance_);
}
inline const ::upstox::LTPC& IndexFullFeed::ltpc() const {
  // @@protoc_insertion_point(field_get:upstox.IndexFullFeed.ltpc)
  return _internal_ltpc();
}
inline void IndexFullFeed::unsafe_arena_set_allocated_ltpc(
    ::upstox::LTPC* ltpc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ltpc_);
  }
  ltpc_ = ltpc;
  if (ltpc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:upstox.IndexFullFeed.ltpc)
}
inline ::upstox::LTPC* IndexFullFeed::release_ltpc() {
  auto temp = unsafe_arena_release_ltpc();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::upstox::LTPC* IndexFullFeed::unsafe_arena_release_ltpc() {
  // @@protoc_insertion_point(field_release:upstox.IndexFullFeed.ltpc)
  
  ::upstox::LTPC* temp = ltpc_;
  ltpc_ = nullptr;
  return temp;
}
inline ::upstox::LTPC* IndexFullFeed::_internal_mutable_ltpc() {
  
  if (ltpc_ == nullptr) {
    auto* p = CreateMaybeMessage<::upstox::LTPC>(GetArena());
    ltpc_ = p;
  }
  return ltpc_;
}
inline ::upstox::LTPC* IndexFullFeed::mutable_ltpc() {
  // @@protoc_insertion_point(field_mutable:upstox.IndexFullFeed.ltpc)
  return _internal_mutable_ltpc();
}
inline void IndexFullFeed::set_allocated_ltpc(::upstox::LTPC* ltpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ltpc_;
  }
  if (ltpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ltpc);
    if (message_arena != submessage_arena) {
      ltpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ltpc, submessage_arena);
    }
    
  } else {
    
  }
  ltpc_ = ltpc;
  // @@protoc_insertion_point(field_set_allocated:upstox.IndexFullFeed.ltpc)
}

// .upstox.MarketOHLC marketOHLC = 2;
inline bool IndexFullFeed::_internal_has_marketohlc() const {
  return this != internal_default_instance() && marketohlc_ != nullptr;
}
inline bool IndexFullFeed::has_marketohlc() const {
  return _internal_has_marketohlc();
}
inline void IndexFullFeed::clear_marketohlc() {
  if (GetArena() == nullptr && marketohlc_ != nullptr) {
    delete marketohlc_;
  }
  marketohlc_ = nullptr;
}
inline const ::upstox::MarketOHLC& IndexFullFeed::_internal_marketohlc() const {
  const ::upstox::MarketOHLC* p = marketohlc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::upstox::MarketOHLC*>(
      &::upstox::_MarketOHLC_default_instance_);
}
inline const ::upstox::MarketOHLC& IndexFullFeed::marketohlc() const {
  // @@protoc_insertion_point(field_get:upstox.IndexFullFeed.marketOHLC)
  return _internal_marketohlc();
}
inline void IndexFullFeed::unsafe_arena_set_allocated_marketohlc(
    ::upstox::MarketOHLC* marketohlc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(marketohlc_);
  }
  marketohlc_ = marketohlc;
  if (marketohlc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:upstox.IndexFullFeed.marketOHLC)
}
inline ::upstox::MarketOHLC* IndexFullFeed::release_marketohlc() {
  auto temp = unsafe_arena_release_marketohlc();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::upstox::MarketOHLC* IndexFullFeed::unsafe_arena_release_marketohlc() {
  // @@protoc_insertion_point(field_release:upstox.IndexFullFeed.marketOHLC)
  
  ::upstox::MarketOHLC* temp = marketohlc_;
  marketohlc_ = nullptr;
  return temp;
}
inline ::upstox::MarketOHLC* IndexFullFeed::_internal_mutable_marketohlc() {
  
  if (marketohlc_ == nullptr) {
    auto* p = CreateMaybeMessage<::upstox::MarketOHLC>(GetArena());
    marketohlc_ = p;
  }
  return marketohlc_;
}
inline ::upstox::MarketOHLC* IndexFullFeed::mutable_marketohlc() {
  // @@protoc_insertion_point(field_mutable:upstox.IndexFullFeed.marketOHLC)
  return _internal_mutable_marketohlc();
}
inline void IndexFullFeed::set_allocated_marketohlc(::upstox::MarketOHLC* marketohlc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete marketohlc_;
  }
  if (marketohlc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(marketohlc);
    if (message_arena != submessage_arena) {
      marketohlc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, marketohlc, submessage_arena);
    }
    
  } else {
    
  }
  marketohlc_ = marketohlc;
  // @@protoc_insertion_point(field_set_allocated:upstox.IndexFullFeed.marketOHLC)
}

// -------------------------------------------------------------------

// FullFeed

// .upstox.MarketFullFeed marketFF = 1;
inline bool FullFeed::_internal_has_marketff() const {
  return FullFeedUnion_case() == kMarketFF;
}
inline bool FullFeed::has_marketff() const {
  return _internal_has_marketff();
}
inline void FullFeed::set_has_marketff() {
  _oneof_case_[0] = kMarketFF;
}
inline void FullFeed::clear_marketff() {
  if (_internal_has_marketff()) {
    if (GetArena() == nullptr) {
      delete FullFeedUnion_.marketff_;
    }
    clear_has_FullFeedUnion();
  }
}
inline ::upstox::MarketFullFeed* FullFeed::release_marketff() {
  // @@protoc_insertion_point(field_release:upstox.FullFeed.marketFF)
  if (_internal_has_marketff()) {
    clear_has_FullFeedUnion();
      ::upstox::MarketFullFeed* temp = FullFeedUnion_.marketff_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    FullFeedUnion_.marketff_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::upstox::MarketFullFeed& FullFeed::_internal_marketff() const {
  return _internal_has_marketff()
      ? *FullFeedUnion_.marketff_
      : *reinterpret_cast< ::upstox::MarketFullFeed*>(&::upstox::_MarketFullFeed_default_instance_);
}
inline const ::upstox::MarketFullFeed& FullFeed::marketff() const {
  // @@protoc_insertion_point(field_get:upstox.FullFeed.marketFF)
  return _internal_marketff();
}
inline ::upstox::MarketFullFeed* FullFeed::unsafe_arena_release_marketff() {
  // @@protoc_insertion_point(field_unsafe_arena_release:upstox.FullFeed.marketFF)
  if (_internal_has_marketff()) {
    clear_has_FullFeedUnion();
    ::upstox::MarketFullFeed* temp = FullFeedUnion_.marketff_;
    FullFeedUnion_.marketff_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FullFeed::unsafe_arena_set_allocated_marketff(::upstox::MarketFullFeed* marketff) {
  clear_FullFeedUnion();
  if (marketff) {
    set_has_marketff();
    FullFeedUnion_.marketff_ = marketff;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:upstox.FullFeed.marketFF)
}
inline ::upstox::MarketFullFeed* FullFeed::_internal_mutable_marketff() {
  if (!_internal_has_marketff()) {
    clear_FullFeedUnion();
    set_has_marketff();
    FullFeedUnion_.marketff_ = CreateMaybeMessage< ::upstox::MarketFullFeed >(GetArena());
  }
  return FullFeedUnion_.marketff_;
}
inline ::upstox::MarketFullFeed* FullFeed::mutable_marketff() {
  // @@protoc_insertion_point(field_mutable:upstox.FullFeed.marketFF)
  return _internal_mutable_marketff();
}

// .upstox.IndexFullFeed indexFF = 2;
inline bool FullFeed::_internal_has_indexff() const {
  return FullFeedUnion_case() == kIndexFF;
}
inline bool FullFeed::has_indexff() const {
  return _internal_has_indexff();
}
inline void FullFeed::set_has_indexff() {
  _oneof_case_[0] = kIndexFF;
}
inline void FullFeed::clear_indexff() {
  if (_internal_has_indexff()) {
    if (GetArena() == nullptr) {
      delete FullFeedUnion_.indexff_;
    }
    clear_has_FullFeedUnion();
  }
}
inline ::upstox::IndexFullFeed* FullFeed::release_indexff() {
  // @@protoc_insertion_point(field_release:upstox.FullFeed.indexFF)
  if (_internal_has_indexff()) {
    clear_has_FullFeedUnion();
      ::upstox::IndexFullFeed* temp = FullFeedUnion_.indexff_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    FullFeedUnion_.indexff_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::upstox::IndexFullFeed& FullFeed::_internal_indexff() const {
  return _internal_has_indexff()
      ? *FullFeedUnion_.indexff_
      : *reinterpret_cast< ::upstox::IndexFullFeed*>(&::upstox::_IndexFullFeed_default_instance_);
}
inline const ::upstox::IndexFullFeed& FullFeed::indexff() const {
  // @@protoc_insertion_point(field_get:upstox.FullFeed.indexFF)
  return _internal_indexff();
}
inline ::upstox::IndexFullFeed* FullFeed::unsafe_arena_release_indexff() {
  // @@protoc_insertion_point(field_unsafe_arena_release:upstox.FullFeed.indexFF)
  if (_internal_has_indexff()) {
    clear_has_FullFeedUnion();
    ::upstox::IndexFullFeed* temp = FullFeedUnion_.indexff_;
    FullFeedUnion_.indexff_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FullFeed::unsafe_arena_set_allocated_indexff(::upstox::IndexFullFeed* indexff) {
  clear_FullFeedUnion();
  if (indexff) {
    set_has_indexff();
    FullFeedUnion_.indexff_ = indexff;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:upstox.FullFeed.indexFF)
}
inline ::upstox::IndexFullFeed* FullFeed::_internal_mutable_indexff() {
  if (!_internal_has_indexff()) {
    clear_FullFeedUnion();
    set_has_indexff();
    FullFeedUnion_.indexff_ = CreateMaybeMessage< ::upstox::IndexFullFeed >(GetArena());
  }
  return FullFeedUnion_.indexff_;
}
inline ::upstox::IndexFullFeed* FullFeed::mutable_indexff() {
  // @@protoc_insertion_point(field_mutable:upstox.FullFeed.indexFF)
  return _internal_mutable_indexff();
}

inline bool FullFeed::has_FullFeedUnion() const {
  return FullFeedUnion_case() != FULLFEEDUNION_NOT_SET;
}
inline void FullFeed::clear_has_FullFeedUnion() {
  _oneof_case_[0] = FULLFEEDUNION_NOT_SET;
}
inline FullFeed::FullFeedUnionCase FullFeed::FullFeedUnion_case() const {
  return FullFeed::FullFeedUnionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FirstLevelWithGreeks

// .upstox.LTPC ltpc = 1;
inline bool FirstLevelWithGreeks::_internal_has_ltpc() const {
  return this != internal_default_instance() && ltpc_ != nullptr;
}
inline bool FirstLevelWithGreeks::has_ltpc() const {
  return _internal_has_ltpc();
}
inline void FirstLevelWithGreeks::clear_ltpc() {
  if (GetArena() == nullptr && ltpc_ != nullptr) {
    delete ltpc_;
  }
  ltpc_ = nullptr;
}
inline const ::upstox::LTPC& FirstLevelWithGreeks::_internal_ltpc() const {
  const ::upstox::LTPC* p = ltpc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::upstox::LTPC*>(
      &::upstox::_LTPC_default_instance_);
}
inline const ::upstox::LTPC& FirstLevelWithGreeks::ltpc() const {
  // @@protoc_insertion_point(field_get:upstox.FirstLevelWithGreeks.ltpc)
  return _internal_ltpc();
}
inline void FirstLevelWithGreeks::unsafe_arena_set_allocated_ltpc(
    ::upstox::LTPC* ltpc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ltpc_);
  }
  ltpc_ = ltpc;
  if (ltpc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:upstox.FirstLevelWithGreeks.ltpc)
}
inline ::upstox::LTPC* FirstLevelWithGreeks::release_ltpc() {
  auto temp = unsafe_arena_release_ltpc();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::upstox::LTPC* FirstLevelWithGreeks::unsafe_arena_release_ltpc() {
  // @@protoc_insertion_point(field_release:upstox.FirstLevelWithGreeks.ltpc)
  
  ::upstox::LTPC* temp = ltpc_;
  ltpc_ = nullptr;
  return temp;
}
inline ::upstox::LTPC* FirstLevelWithGreeks::_internal_mutable_ltpc() {
  
  if (ltpc_ == nullptr) {
    auto* p = CreateMaybeMessage<::upstox::LTPC>(GetArena());
    ltpc_ = p;
  }
  return ltpc_;
}
inline ::upstox::LTPC* FirstLevelWithGreeks::mutable_ltpc() {
  // @@protoc_insertion_point(field_mutable:upstox.FirstLevelWithGreeks.ltpc)
  return _internal_mutable_ltpc();
}
inline void FirstLevelWithGreeks::set_allocated_ltpc(::upstox::LTPC* ltpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ltpc_;
  }
  if (ltpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ltpc);
    if (message_arena != submessage_arena) {
      ltpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ltpc, submessage_arena);
    }
    
  } else {
    
  }
  ltpc_ = ltpc;
  // @@protoc_insertion_point(field_set_allocated:upstox.FirstLevelWithGreeks.ltpc)
}

// .upstox.Quote firstDepth = 2;
inline bool FirstLevelWithGreeks::_internal_has_firstdepth() const {
  return this != internal_default_instance() && firstdepth_ != nullptr;
}
inline bool FirstLevelWithGreeks::has_firstdepth() const {
  return _internal_has_firstdepth();
}
inline void FirstLevelWithGreeks::clear_firstdepth() {
  if (GetArena() == nullptr && firstdepth_ != nullptr) {
    delete firstdepth_;
  }
  firstdepth_ = nullptr;
}
inline const ::upstox::Quote& FirstLevelWithGreeks::_internal_firstdepth() const {
  const ::upstox::Quote* p = firstdepth_;
  return p != nullptr ? *p : *reinterpret_cast<const ::upstox::Quote*>(
      &::upstox::_Quote_default_instance_);
}
inline const ::upstox::Quote& FirstLevelWithGreeks::firstdepth() const {
  // @@protoc_insertion_point(field_get:upstox.FirstLevelWithGreeks.firstDepth)
  return _internal_firstdepth();
}
inline void FirstLevelWithGreeks::unsafe_arena_set_allocated_firstdepth(
    ::upstox::Quote* firstdepth) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(firstdepth_);
  }
  firstdepth_ = firstdepth;
  if (firstdepth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:upstox.FirstLevelWithGreeks.firstDepth)
}
inline ::upstox::Quote* FirstLevelWithGreeks::release_firstdepth() {
  auto temp = unsafe_arena_release_firstdepth();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::upstox::Quote* FirstLevelWithGreeks::unsafe_arena_release_firstdepth() {
  // @@protoc_insertion_point(field_release:upstox.FirstLevelWithGreeks.firstDepth)
  
  ::upstox::Quote* temp = firstdepth_;
  firstdepth_ = nullptr;
  return temp;
}
inline ::upstox::Quote* FirstLevelWithGreeks::_internal_mutable_firstdepth() {
  
  if (firstdepth_ == nullptr) {
    auto* p = CreateMaybeMessage<::upstox::Quote>(GetArena());
    firstdepth_ = p;
  }
  return firstdepth_;
}
inline ::upstox::Quote* FirstLevelWithGreeks::mutable_firstdepth() {
  // @@protoc_insertion_point(field_mutable:upstox.FirstLevelWithGreeks.firstDepth)
  return _internal_mutable_firstdepth();
}
inline void FirstLevelWithGreeks::set_allocated_firstdepth(::upstox::Quote* firstdepth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete firstdepth_;
  }
  if (firstdepth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(firstdepth);
    if (message_arena != submessage_arena) {
      firstdepth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, firstdepth, submessage_arena);
    }
    
  } else {
    
  }
  firstdepth_ = firstdepth;
  // @@protoc_insertion_point(field_set_allocated:upstox.FirstLevelWithGreeks.firstDepth)
}

// .upstox.OptionGreeks optionGreeks = 3;
inline bool FirstLevelWithGreeks::_internal_has_optiongreeks() const {
  return this != internal_default_instance() && optiongreeks_ != nullptr;
}
inline bool FirstLevelWithGreeks::has_optiongreeks() const {
  return _internal_has_optiongreeks();
}
inline void FirstLevelWithGreeks::clear_optiongreeks() {
  if (GetArena() == nullptr && optiongreeks_ != nullptr) {
    delete optiongreeks_;
  }
  optiongreeks_ = nullptr;
}
inline const ::upstox::OptionGreeks& FirstLevelWithGreeks::_internal_optiongreeks() const {
  const ::upstox::OptionGreeks* p = optiongreeks_;
  return p != nullptr ? *p : *reinterpret_cast<const ::upstox::OptionGreeks*>(
      &::upstox::_OptionGreeks_default_instance_);
}
inline const ::upstox::OptionGreeks& FirstLevelWithGreeks::optiongreeks() const {
  // @@protoc_insertion_point(field_get:upstox.FirstLevelWithGreeks.optionGreeks)
  return _internal_optiongreeks();
}
inline void FirstLevelWithGreeks::unsafe_arena_set_allocated_optiongreeks(
    ::upstox::OptionGreeks* optiongreeks) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optiongreeks_);
  }
  optiongreeks_ = optiongreeks;
  if (optiongreeks) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:upstox.FirstLevelWithGreeks.optionGreeks)
}
inline ::upstox::OptionGreeks* FirstLevelWithGreeks::release_optiongreeks() {
  auto temp = unsafe_arena_release_optiongreeks();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::upstox::OptionGreeks* FirstLevelWithGreeks::unsafe_arena_release_optiongreeks() {
  // @@protoc_insertion_point(field_release:upstox.FirstLevelWithGreeks.optionGreeks)
  
  ::upstox::OptionGreeks* temp = optiongreeks_;
  optiongreeks_ = nullptr;
  return temp;
}
inline ::upstox::OptionGreeks* FirstLevelWithGreeks::_internal_mutable_optiongreeks() {
  
  if (optiongreeks_ == nullptr) {
    auto* p = CreateMaybeMessage<::upstox::OptionGreeks>(GetArena());
    optiongreeks_ = p;
  }
  return optiongreeks_;
}
inline ::upstox::OptionGreeks* FirstLevelWithGreeks::mutable_optiongreeks() {
  // @@protoc_insertion_point(field_mutable:upstox.FirstLevelWithGreeks.optionGreeks)
  return _internal_mutable_optiongreeks();
}
inline void FirstLevelWithGreeks::set_allocated_optiongreeks(::upstox::OptionGreeks* optiongreeks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete optiongreeks_;
  }
  if (optiongreeks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(optiongreeks);
    if (message_arena != submessage_arena) {
      optiongreeks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optiongreeks, submessage_arena);
    }
    
  } else {
    
  }
  optiongreeks_ = optiongreeks;
  // @@protoc_insertion_point(field_set_allocated:upstox.FirstLevelWithGreeks.optionGreeks)
}

// int64 vtt = 4;
inline void FirstLevelWithGreeks::clear_vtt() {
  vtt_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FirstLevelWithGreeks::_internal_vtt() const {
  return vtt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FirstLevelWithGreeks::vtt() const {
  // @@protoc_insertion_point(field_get:upstox.FirstLevelWithGreeks.vtt)
  return _internal_vtt();
}
inline void FirstLevelWithGreeks::_internal_set_vtt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  vtt_ = value;
}
inline void FirstLevelWithGreeks::set_vtt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_vtt(value);
  // @@protoc_insertion_point(field_set:upstox.FirstLevelWithGreeks.vtt)
}

// double oi = 5;
inline void FirstLevelWithGreeks::clear_oi() {
  oi_ = 0;
}
inline double FirstLevelWithGreeks::_internal_oi() const {
  return oi_;
}
inline double FirstLevelWithGreeks::oi() const {
  // @@protoc_insertion_point(field_get:upstox.FirstLevelWithGreeks.oi)
  return _internal_oi();
}
inline void FirstLevelWithGreeks::_internal_set_oi(double value) {
  
  oi_ = value;
}
inline void FirstLevelWithGreeks::set_oi(double value) {
  _internal_set_oi(value);
  // @@protoc_insertion_point(field_set:upstox.FirstLevelWithGreeks.oi)
}

// double iv = 6;
inline void FirstLevelWithGreeks::clear_iv() {
  iv_ = 0;
}
inline double FirstLevelWithGreeks::_internal_iv() const {
  return iv_;
}
inline double FirstLevelWithGreeks::iv() const {
  // @@protoc_insertion_point(field_get:upstox.FirstLevelWithGreeks.iv)
  return _internal_iv();
}
inline void FirstLevelWithGreeks::_internal_set_iv(double value) {
  
  iv_ = value;
}
inline void FirstLevelWithGreeks::set_iv(double value) {
  _internal_set_iv(value);
  // @@protoc_insertion_point(field_set:upstox.FirstLevelWithGreeks.iv)
}

// -------------------------------------------------------------------

// Feed

// .upstox.LTPC ltpc = 1;
inline bool Feed::_internal_has_ltpc() const {
  return FeedUnion_case() == kLtpc;
}
inline bool Feed::has_ltpc() const {
  return _internal_has_ltpc();
}
inline void Feed::set_has_ltpc() {
  _oneof_case_[0] = kLtpc;
}
inline void Feed::clear_ltpc() {
  if (_internal_has_ltpc()) {
    if (GetArena() == nullptr) {
      delete FeedUnion_.ltpc_;
    }
    clear_has_FeedUnion();
  }
}
inline ::upstox::LTPC* Feed::release_ltpc() {
  // @@protoc_insertion_point(field_release:upstox.Feed.ltpc)
  if (_internal_has_ltpc()) {
    clear_has_FeedUnion();
      ::upstox::LTPC* temp = FeedUnion_.ltpc_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    FeedUnion_.ltpc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::upstox::LTPC& Feed::_internal_ltpc() const {
  return _internal_has_ltpc()
      ? *FeedUnion_.ltpc_
      : *reinterpret_cast< ::upstox::LTPC*>(&::upstox::_LTPC_default_instance_);
}
inline const ::upstox::LTPC& Feed::ltpc() const {
  // @@protoc_insertion_point(field_get:upstox.Feed.ltpc)
  return _internal_ltpc();
}
inline ::upstox::LTPC* Feed::unsafe_arena_release_ltpc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:upstox.Feed.ltpc)
  if (_internal_has_ltpc()) {
    clear_has_FeedUnion();
    ::upstox::LTPC* temp = FeedUnion_.ltpc_;
    FeedUnion_.ltpc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Feed::unsafe_arena_set_allocated_ltpc(::upstox::LTPC* ltpc) {
  clear_FeedUnion();
  if (ltpc) {
    set_has_ltpc();
    FeedUnion_.ltpc_ = ltpc;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:upstox.Feed.ltpc)
}
inline ::upstox::LTPC* Feed::_internal_mutable_ltpc() {
  if (!_internal_has_ltpc()) {
    clear_FeedUnion();
    set_has_ltpc();
    FeedUnion_.ltpc_ = CreateMaybeMessage< ::upstox::LTPC >(GetArena());
  }
  return FeedUnion_.ltpc_;
}
inline ::upstox::LTPC* Feed::mutable_ltpc() {
  // @@protoc_insertion_point(field_mutable:upstox.Feed.ltpc)
  return _internal_mutable_ltpc();
}

// .upstox.FullFeed fullFeed = 2;
inline bool Feed::_internal_has_fullfeed() const {
  return FeedUnion_case() == kFullFeed;
}
inline bool Feed::has_fullfeed() const {
  return _internal_has_fullfeed();
}
inline void Feed::set_has_fullfeed() {
  _oneof_case_[0] = kFullFeed;
}
inline void Feed::clear_fullfeed() {
  if (_internal_has_fullfeed()) {
    if (GetArena() == nullptr) {
      delete FeedUnion_.fullfeed_;
    }
    clear_has_FeedUnion();
  }
}
inline ::upstox::FullFeed* Feed::release_fullfeed() {
  // @@protoc_insertion_point(field_release:upstox.Feed.fullFeed)
  if (_internal_has_fullfeed()) {
    clear_has_FeedUnion();
      ::upstox::FullFeed* temp = FeedUnion_.fullfeed_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    FeedUnion_.fullfeed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::upstox::FullFeed& Feed::_internal_fullfeed() const {
  return _internal_has_fullfeed()
      ? *FeedUnion_.fullfeed_
      : *reinterpret_cast< ::upstox::FullFeed*>(&::upstox::_FullFeed_default_instance_);
}
inline const ::upstox::FullFeed& Feed::fullfeed() const {
  // @@protoc_insertion_point(field_get:upstox.Feed.fullFeed)
  return _internal_fullfeed();
}
inline ::upstox::FullFeed* Feed::unsafe_arena_release_fullfeed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:upstox.Feed.fullFeed)
  if (_internal_has_fullfeed()) {
    clear_has_FeedUnion();
    ::upstox::FullFeed* temp = FeedUnion_.fullfeed_;
    FeedUnion_.fullfeed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Feed::unsafe_arena_set_allocated_fullfeed(::upstox::FullFeed* fullfeed) {
  clear_FeedUnion();
  if (fullfeed) {
    set_has_fullfeed();
    FeedUnion_.fullfeed_ = fullfeed;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:upstox.Feed.fullFeed)
}
inline ::upstox::FullFeed* Feed::_internal_mutable_fullfeed() {
  if (!_internal_has_fullfeed()) {
    clear_FeedUnion();
    set_has_fullfeed();
    FeedUnion_.fullfeed_ = CreateMaybeMessage< ::upstox::FullFeed >(GetArena());
  }
  return FeedUnion_.fullfeed_;
}
inline ::upstox::FullFeed* Feed::mutable_fullfeed() {
  // @@protoc_insertion_point(field_mutable:upstox.Feed.fullFeed)
  return _internal_mutable_fullfeed();
}

// .upstox.FirstLevelWithGreeks firstLevelWithGreeks = 3;
inline bool Feed::_internal_has_firstlevelwithgreeks() const {
  return FeedUnion_case() == kFirstLevelWithGreeks;
}
inline bool Feed::has_firstlevelwithgreeks() const {
  return _internal_has_firstlevelwithgreeks();
}
inline void Feed::set_has_firstlevelwithgreeks() {
  _oneof_case_[0] = kFirstLevelWithGreeks;
}
inline void Feed::clear_firstlevelwithgreeks() {
  if (_internal_has_firstlevelwithgreeks()) {
    if (GetArena() == nullptr) {
      delete FeedUnion_.firstlevelwithgreeks_;
    }
    clear_has_FeedUnion();
  }
}
inline ::upstox::FirstLevelWithGreeks* Feed::release_firstlevelwithgreeks() {
  // @@protoc_insertion_point(field_release:upstox.Feed.firstLevelWithGreeks)
  if (_internal_has_firstlevelwithgreeks()) {
    clear_has_FeedUnion();
      ::upstox::FirstLevelWithGreeks* temp = FeedUnion_.firstlevelwithgreeks_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    FeedUnion_.firstlevelwithgreeks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::upstox::FirstLevelWithGreeks& Feed::_internal_firstlevelwithgreeks() const {
  return _internal_has_firstlevelwithgreeks()
      ? *FeedUnion_.firstlevelwithgreeks_
      : *reinterpret_cast< ::upstox::FirstLevelWithGreeks*>(&::upstox::_FirstLevelWithGreeks_default_instance_);
}
inline const ::upstox::FirstLevelWithGreeks& Feed::firstlevelwithgreeks() const {
  // @@protoc_insertion_point(field_get:upstox.Feed.firstLevelWithGreeks)
  return _internal_firstlevelwithgreeks();
}
inline ::upstox::FirstLevelWithGreeks* Feed::unsafe_arena_release_firstlevelwithgreeks() {
  // @@protoc_insertion_point(field_unsafe_arena_release:upstox.Feed.firstLevelWithGreeks)
  if (_internal_has_firstlevelwithgreeks()) {
    clear_has_FeedUnion();
    ::upstox::FirstLevelWithGreeks* temp = FeedUnion_.firstlevelwithgreeks_;
    FeedUnion_.firstlevelwithgreeks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Feed::unsafe_arena_set_allocated_firstlevelwithgreeks(::upstox::FirstLevelWithGreeks* firstlevelwithgreeks) {
  clear_FeedUnion();
  if (firstlevelwithgreeks) {
    set_has_firstlevelwithgreeks();
    FeedUnion_.firstlevelwithgreeks_ = firstlevelwithgreeks;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:upstox.Feed.firstLevelWithGreeks)
}
inline ::upstox::FirstLevelWithGreeks* Feed::_internal_mutable_firstlevelwithgreeks() {
  if (!_internal_has_firstlevelwithgreeks()) {
    clear_FeedUnion();
    set_has_firstlevelwithgreeks();
    FeedUnion_.firstlevelwithgreeks_ = CreateMaybeMessage< ::upstox::FirstLevelWithGreeks >(GetArena());
  }
  return FeedUnion_.firstlevelwithgreeks_;
}
inline ::upstox::FirstLevelWithGreeks* Feed::mutable_firstlevelwithgreeks() {
  // @@protoc_insertion_point(field_mutable:upstox.Feed.firstLevelWithGreeks)
  return _internal_mutable_firstlevelwithgreeks();
}

// .upstox.RequestMode requestMode = 4;
inline void Feed::clear_requestmode() {
  requestmode_ = 0;
}
inline ::upstox::RequestMode Feed::_internal_requestmode() const {
  return static_cast< ::upstox::RequestMode >(requestmode_);
}
inline ::upstox::RequestMode Feed::requestmode() const {
  // @@protoc_insertion_point(field_get:upstox.Feed.requestMode)
  return _internal_requestmode();
}
inline void Feed::_internal_set_requestmode(::upstox::RequestMode value) {
  
  requestmode_ = value;
}
inline void Feed::set_requestmode(::upstox::RequestMode value) {
  _internal_set_requestmode(value);
  // @@protoc_insertion_point(field_set:upstox.Feed.requestMode)
}

inline bool Feed::has_FeedUnion() const {
  return FeedUnion_case() != FEEDUNION_NOT_SET;
}
inline void Feed::clear_has_FeedUnion() {
  _oneof_case_[0] = FEEDUNION_NOT_SET;
}
inline Feed::FeedUnionCase Feed::FeedUnion_case() const {
  return Feed::FeedUnionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MarketInfo

// map<string, .upstox.MarketStatus> segmentStatus = 1;
inline int MarketInfo::_internal_segmentstatus_size() const {
  return segmentstatus_.size();
}
inline int MarketInfo::segmentstatus_size() const {
  return _internal_segmentstatus_size();
}
inline void MarketInfo::clear_segmentstatus() {
  segmentstatus_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::upstox::MarketStatus >&
MarketInfo::_internal_segmentstatus() const {
  return segmentstatus_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::upstox::MarketStatus >&
MarketInfo::segmentstatus() const {
  // @@protoc_insertion_point(field_map:upstox.MarketInfo.segmentStatus)
  return _internal_segmentstatus();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::upstox::MarketStatus >*
MarketInfo::_internal_mutable_segmentstatus() {
  return segmentstatus_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::upstox::MarketStatus >*
MarketInfo::mutable_segmentstatus() {
  // @@protoc_insertion_point(field_mutable_map:upstox.MarketInfo.segmentStatus)
  return _internal_mutable_segmentstatus();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FeedResponse

// .upstox.Type type = 1;
inline void FeedResponse::clear_type() {
  type_ = 0;
}
inline ::upstox::Type FeedResponse::_internal_type() const {
  return static_cast< ::upstox::Type >(type_);
}
inline ::upstox::Type FeedResponse::type() const {
  // @@protoc_insertion_point(field_get:upstox.FeedResponse.type)
  return _internal_type();
}
inline void FeedResponse::_internal_set_type(::upstox::Type value) {
  
  type_ = value;
}
inline void FeedResponse::set_type(::upstox::Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:upstox.FeedResponse.type)
}

// map<string, .upstox.Feed> feeds = 2;
inline int FeedResponse::_internal_feeds_size() const {
  return feeds_.size();
}
inline int FeedResponse::feeds_size() const {
  return _internal_feeds_size();
}
inline void FeedResponse::clear_feeds() {
  feeds_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::upstox::Feed >&
FeedResponse::_internal_feeds() const {
  return feeds_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::upstox::Feed >&
FeedResponse::feeds() const {
  // @@protoc_insertion_point(field_map:upstox.FeedResponse.feeds)
  return _internal_feeds();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::upstox::Feed >*
FeedResponse::_internal_mutable_feeds() {
  return feeds_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::upstox::Feed >*
FeedResponse::mutable_feeds() {
  // @@protoc_insertion_point(field_mutable_map:upstox.FeedResponse.feeds)
  return _internal_mutable_feeds();
}

// int64 currentTs = 3;
inline void FeedResponse::clear_currentts() {
  currentts_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FeedResponse::_internal_currentts() const {
  return currentts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FeedResponse::currentts() const {
  // @@protoc_insertion_point(field_get:upstox.FeedResponse.currentTs)
  return _internal_currentts();
}
inline void FeedResponse::_internal_set_currentts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  currentts_ = value;
}
inline void FeedResponse::set_currentts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_currentts(value);
  // @@protoc_insertion_point(field_set:upstox.FeedResponse.currentTs)
}

// .upstox.MarketInfo marketInfo = 4;
inline bool FeedResponse::_internal_has_marketinfo() const {
  return this != internal_default_instance() && marketinfo_ != nullptr;
}
inline bool FeedResponse::has_marketinfo() const {
  return _internal_has_marketinfo();
}
inline void FeedResponse::clear_marketinfo() {
  if (GetArena() == nullptr && marketinfo_ != nullptr) {
    delete marketinfo_;
  }
  marketinfo_ = nullptr;
}
inline const ::upstox::MarketInfo& FeedResponse::_internal_marketinfo() const {
  const ::upstox::MarketInfo* p = marketinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::upstox::MarketInfo*>(
      &::upstox::_MarketInfo_default_instance_);
}
inline const ::upstox::MarketInfo& FeedResponse::marketinfo() const {
  // @@protoc_insertion_point(field_get:upstox.FeedResponse.marketInfo)
  return _internal_marketinfo();
}
inline void FeedResponse::unsafe_arena_set_allocated_marketinfo(
    ::upstox::MarketInfo* marketinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(marketinfo_);
  }
  marketinfo_ = marketinfo;
  if (marketinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:upstox.FeedResponse.marketInfo)
}
inline ::upstox::MarketInfo* FeedResponse::release_marketinfo() {
  auto temp = unsafe_arena_release_marketinfo();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::upstox::MarketInfo* FeedResponse::unsafe_arena_release_marketinfo() {
  // @@protoc_insertion_point(field_release:upstox.FeedResponse.marketInfo)
  
  ::upstox::MarketInfo* temp = marketinfo_;
  marketinfo_ = nullptr;
  return temp;
}
inline ::upstox::MarketInfo* FeedResponse::_internal_mutable_marketinfo() {
  
  if (marketinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::upstox::MarketInfo>(GetArena());
    marketinfo_ = p;
  }
  return marketinfo_;
}
inline ::upstox::MarketInfo* FeedResponse::mutable_marketinfo() {
  // @@protoc_insertion_point(field_mutable:upstox.FeedResponse.marketInfo)
  return _internal_mutable_marketinfo();
}
inline void FeedResponse::set_allocated_marketinfo(::upstox::MarketInfo* marketinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete marketinfo_;
  }
  if (marketinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(marketinfo);
    if (message_arena != submessage_arena) {
      marketinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, marketinfo, submessage_arena);
    }
    
  } else {
    
  }
  marketinfo_ = marketinfo;
  // @@protoc_insertion_point(field_set_allocated:upstox.FeedResponse.marketInfo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace upstox

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::upstox::Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::upstox::Type>() {
  return ::upstox::Type_descriptor();
}
template <> struct is_proto_enum< ::upstox::RequestMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::upstox::RequestMode>() {
  return ::upstox::RequestMode_descriptor();
}
template <> struct is_proto_enum< ::upstox::MarketStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::upstox::MarketStatus>() {
  return ::upstox::MarketStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MarketDataFeedV3_2eproto
