// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MarketDataFeedV3.proto

#include "MarketDataFeedV3.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_MarketDataFeedV3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Feed_MarketDataFeedV3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MarketDataFeedV3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FeedResponse_FeedsEntry_DoNotUse_MarketDataFeedV3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MarketDataFeedV3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FirstLevelWithGreeks_MarketDataFeedV3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MarketDataFeedV3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FullFeed_MarketDataFeedV3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MarketDataFeedV3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IndexFullFeed_MarketDataFeedV3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MarketDataFeedV3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LTPC_MarketDataFeedV3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MarketDataFeedV3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MarketFullFeed_MarketDataFeedV3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MarketDataFeedV3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketInfo_MarketDataFeedV3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MarketDataFeedV3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarketInfo_SegmentStatusEntry_DoNotUse_MarketDataFeedV3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MarketDataFeedV3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketLevel_MarketDataFeedV3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MarketDataFeedV3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketOHLC_MarketDataFeedV3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MarketDataFeedV3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OHLC_MarketDataFeedV3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MarketDataFeedV3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OptionGreeks_MarketDataFeedV3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MarketDataFeedV3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quote_MarketDataFeedV3_2eproto;
namespace upstox {
class LTPCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LTPC> _instance;
} _LTPC_default_instance_;
class MarketLevelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketLevel> _instance;
} _MarketLevel_default_instance_;
class MarketOHLCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketOHLC> _instance;
} _MarketOHLC_default_instance_;
class QuoteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Quote> _instance;
} _Quote_default_instance_;
class OptionGreeksDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OptionGreeks> _instance;
} _OptionGreeks_default_instance_;
class OHLCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OHLC> _instance;
} _OHLC_default_instance_;
class MarketFullFeedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketFullFeed> _instance;
} _MarketFullFeed_default_instance_;
class IndexFullFeedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IndexFullFeed> _instance;
} _IndexFullFeed_default_instance_;
class FullFeedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FullFeed> _instance;
  const ::upstox::MarketFullFeed* marketff_;
  const ::upstox::IndexFullFeed* indexff_;
} _FullFeed_default_instance_;
class FirstLevelWithGreeksDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirstLevelWithGreeks> _instance;
} _FirstLevelWithGreeks_default_instance_;
class FeedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Feed> _instance;
  const ::upstox::LTPC* ltpc_;
  const ::upstox::FullFeed* fullfeed_;
  const ::upstox::FirstLevelWithGreeks* firstlevelwithgreeks_;
} _Feed_default_instance_;
class MarketInfo_SegmentStatusEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketInfo_SegmentStatusEntry_DoNotUse> _instance;
} _MarketInfo_SegmentStatusEntry_DoNotUse_default_instance_;
class MarketInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketInfo> _instance;
} _MarketInfo_default_instance_;
class FeedResponse_FeedsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FeedResponse_FeedsEntry_DoNotUse> _instance;
} _FeedResponse_FeedsEntry_DoNotUse_default_instance_;
class FeedResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FeedResponse> _instance;
} _FeedResponse_default_instance_;
}  // namespace upstox
static void InitDefaultsscc_info_Feed_MarketDataFeedV3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::upstox::_Feed_default_instance_;
    new (ptr) ::upstox::Feed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::upstox::Feed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Feed_MarketDataFeedV3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Feed_MarketDataFeedV3_2eproto}, {
      &scc_info_LTPC_MarketDataFeedV3_2eproto.base,
      &scc_info_FullFeed_MarketDataFeedV3_2eproto.base,
      &scc_info_FirstLevelWithGreeks_MarketDataFeedV3_2eproto.base,}};

static void InitDefaultsscc_info_FeedResponse_MarketDataFeedV3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::upstox::_FeedResponse_default_instance_;
    new (ptr) ::upstox::FeedResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::upstox::FeedResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FeedResponse_MarketDataFeedV3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FeedResponse_MarketDataFeedV3_2eproto}, {
      &scc_info_FeedResponse_FeedsEntry_DoNotUse_MarketDataFeedV3_2eproto.base,
      &scc_info_MarketInfo_MarketDataFeedV3_2eproto.base,}};

static void InitDefaultsscc_info_FeedResponse_FeedsEntry_DoNotUse_MarketDataFeedV3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::upstox::_FeedResponse_FeedsEntry_DoNotUse_default_instance_;
    new (ptr) ::upstox::FeedResponse_FeedsEntry_DoNotUse();
  }
  ::upstox::FeedResponse_FeedsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FeedResponse_FeedsEntry_DoNotUse_MarketDataFeedV3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FeedResponse_FeedsEntry_DoNotUse_MarketDataFeedV3_2eproto}, {
      &scc_info_Feed_MarketDataFeedV3_2eproto.base,}};

static void InitDefaultsscc_info_FirstLevelWithGreeks_MarketDataFeedV3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::upstox::_FirstLevelWithGreeks_default_instance_;
    new (ptr) ::upstox::FirstLevelWithGreeks();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::upstox::FirstLevelWithGreeks::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FirstLevelWithGreeks_MarketDataFeedV3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_FirstLevelWithGreeks_MarketDataFeedV3_2eproto}, {
      &scc_info_LTPC_MarketDataFeedV3_2eproto.base,
      &scc_info_Quote_MarketDataFeedV3_2eproto.base,
      &scc_info_OptionGreeks_MarketDataFeedV3_2eproto.base,}};

static void InitDefaultsscc_info_FullFeed_MarketDataFeedV3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::upstox::_FullFeed_default_instance_;
    new (ptr) ::upstox::FullFeed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::upstox::FullFeed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FullFeed_MarketDataFeedV3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FullFeed_MarketDataFeedV3_2eproto}, {
      &scc_info_MarketFullFeed_MarketDataFeedV3_2eproto.base,
      &scc_info_IndexFullFeed_MarketDataFeedV3_2eproto.base,}};

static void InitDefaultsscc_info_IndexFullFeed_MarketDataFeedV3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::upstox::_IndexFullFeed_default_instance_;
    new (ptr) ::upstox::IndexFullFeed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::upstox::IndexFullFeed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IndexFullFeed_MarketDataFeedV3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_IndexFullFeed_MarketDataFeedV3_2eproto}, {
      &scc_info_LTPC_MarketDataFeedV3_2eproto.base,
      &scc_info_MarketOHLC_MarketDataFeedV3_2eproto.base,}};

static void InitDefaultsscc_info_LTPC_MarketDataFeedV3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::upstox::_LTPC_default_instance_;
    new (ptr) ::upstox::LTPC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::upstox::LTPC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LTPC_MarketDataFeedV3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LTPC_MarketDataFeedV3_2eproto}, {}};

static void InitDefaultsscc_info_MarketFullFeed_MarketDataFeedV3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::upstox::_MarketFullFeed_default_instance_;
    new (ptr) ::upstox::MarketFullFeed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::upstox::MarketFullFeed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MarketFullFeed_MarketDataFeedV3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_MarketFullFeed_MarketDataFeedV3_2eproto}, {
      &scc_info_LTPC_MarketDataFeedV3_2eproto.base,
      &scc_info_MarketLevel_MarketDataFeedV3_2eproto.base,
      &scc_info_OptionGreeks_MarketDataFeedV3_2eproto.base,
      &scc_info_MarketOHLC_MarketDataFeedV3_2eproto.base,}};

static void InitDefaultsscc_info_MarketInfo_MarketDataFeedV3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::upstox::_MarketInfo_default_instance_;
    new (ptr) ::upstox::MarketInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::upstox::MarketInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketInfo_MarketDataFeedV3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MarketInfo_MarketDataFeedV3_2eproto}, {
      &scc_info_MarketInfo_SegmentStatusEntry_DoNotUse_MarketDataFeedV3_2eproto.base,}};

static void InitDefaultsscc_info_MarketInfo_SegmentStatusEntry_DoNotUse_MarketDataFeedV3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::upstox::_MarketInfo_SegmentStatusEntry_DoNotUse_default_instance_;
    new (ptr) ::upstox::MarketInfo_SegmentStatusEntry_DoNotUse();
  }
  ::upstox::MarketInfo_SegmentStatusEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarketInfo_SegmentStatusEntry_DoNotUse_MarketDataFeedV3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MarketInfo_SegmentStatusEntry_DoNotUse_MarketDataFeedV3_2eproto}, {}};

static void InitDefaultsscc_info_MarketLevel_MarketDataFeedV3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::upstox::_MarketLevel_default_instance_;
    new (ptr) ::upstox::MarketLevel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::upstox::MarketLevel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketLevel_MarketDataFeedV3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MarketLevel_MarketDataFeedV3_2eproto}, {
      &scc_info_Quote_MarketDataFeedV3_2eproto.base,}};

static void InitDefaultsscc_info_MarketOHLC_MarketDataFeedV3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::upstox::_MarketOHLC_default_instance_;
    new (ptr) ::upstox::MarketOHLC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::upstox::MarketOHLC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketOHLC_MarketDataFeedV3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MarketOHLC_MarketDataFeedV3_2eproto}, {
      &scc_info_OHLC_MarketDataFeedV3_2eproto.base,}};

static void InitDefaultsscc_info_OHLC_MarketDataFeedV3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::upstox::_OHLC_default_instance_;
    new (ptr) ::upstox::OHLC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::upstox::OHLC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OHLC_MarketDataFeedV3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OHLC_MarketDataFeedV3_2eproto}, {}};

static void InitDefaultsscc_info_OptionGreeks_MarketDataFeedV3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::upstox::_OptionGreeks_default_instance_;
    new (ptr) ::upstox::OptionGreeks();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::upstox::OptionGreeks::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OptionGreeks_MarketDataFeedV3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OptionGreeks_MarketDataFeedV3_2eproto}, {}};

static void InitDefaultsscc_info_Quote_MarketDataFeedV3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::upstox::_Quote_default_instance_;
    new (ptr) ::upstox::Quote();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::upstox::Quote::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quote_MarketDataFeedV3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Quote_MarketDataFeedV3_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_MarketDataFeedV3_2eproto[15];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_MarketDataFeedV3_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MarketDataFeedV3_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_MarketDataFeedV3_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::upstox::LTPC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::upstox::LTPC, ltp_),
  PROTOBUF_FIELD_OFFSET(::upstox::LTPC, ltt_),
  PROTOBUF_FIELD_OFFSET(::upstox::LTPC, cp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::upstox::MarketLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::upstox::MarketLevel, bidaskquote_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::upstox::MarketOHLC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::upstox::MarketOHLC, ohlc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::upstox::Quote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::upstox::Quote, bidq_),
  PROTOBUF_FIELD_OFFSET(::upstox::Quote, bidp_),
  PROTOBUF_FIELD_OFFSET(::upstox::Quote, askq_),
  PROTOBUF_FIELD_OFFSET(::upstox::Quote, askp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::upstox::OptionGreeks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::upstox::OptionGreeks, delta_),
  PROTOBUF_FIELD_OFFSET(::upstox::OptionGreeks, theta_),
  PROTOBUF_FIELD_OFFSET(::upstox::OptionGreeks, gamma_),
  PROTOBUF_FIELD_OFFSET(::upstox::OptionGreeks, vega_),
  PROTOBUF_FIELD_OFFSET(::upstox::OptionGreeks, rho_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::upstox::OHLC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::upstox::OHLC, interval_),
  PROTOBUF_FIELD_OFFSET(::upstox::OHLC, open_),
  PROTOBUF_FIELD_OFFSET(::upstox::OHLC, high_),
  PROTOBUF_FIELD_OFFSET(::upstox::OHLC, low_),
  PROTOBUF_FIELD_OFFSET(::upstox::OHLC, close_),
  PROTOBUF_FIELD_OFFSET(::upstox::OHLC, vol_),
  PROTOBUF_FIELD_OFFSET(::upstox::OHLC, ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::upstox::MarketFullFeed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::upstox::MarketFullFeed, ltpc_),
  PROTOBUF_FIELD_OFFSET(::upstox::MarketFullFeed, marketlevel_),
  PROTOBUF_FIELD_OFFSET(::upstox::MarketFullFeed, optiongreeks_),
  PROTOBUF_FIELD_OFFSET(::upstox::MarketFullFeed, marketohlc_),
  PROTOBUF_FIELD_OFFSET(::upstox::MarketFullFeed, atp_),
  PROTOBUF_FIELD_OFFSET(::upstox::MarketFullFeed, vtt_),
  PROTOBUF_FIELD_OFFSET(::upstox::MarketFullFeed, oi_),
  PROTOBUF_FIELD_OFFSET(::upstox::MarketFullFeed, iv_),
  PROTOBUF_FIELD_OFFSET(::upstox::MarketFullFeed, tbq_),
  PROTOBUF_FIELD_OFFSET(::upstox::MarketFullFeed, tsq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::upstox::IndexFullFeed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::upstox::IndexFullFeed, ltpc_),
  PROTOBUF_FIELD_OFFSET(::upstox::IndexFullFeed, marketohlc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::upstox::FullFeed, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::upstox::FullFeed, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::upstox::FullFeedDefaultTypeInternal, marketff_),
  offsetof(::upstox::FullFeedDefaultTypeInternal, indexff_),
  PROTOBUF_FIELD_OFFSET(::upstox::FullFeed, FullFeedUnion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::upstox::FirstLevelWithGreeks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::upstox::FirstLevelWithGreeks, ltpc_),
  PROTOBUF_FIELD_OFFSET(::upstox::FirstLevelWithGreeks, firstdepth_),
  PROTOBUF_FIELD_OFFSET(::upstox::FirstLevelWithGreeks, optiongreeks_),
  PROTOBUF_FIELD_OFFSET(::upstox::FirstLevelWithGreeks, vtt_),
  PROTOBUF_FIELD_OFFSET(::upstox::FirstLevelWithGreeks, oi_),
  PROTOBUF_FIELD_OFFSET(::upstox::FirstLevelWithGreeks, iv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::upstox::Feed, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::upstox::Feed, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::upstox::FeedDefaultTypeInternal, ltpc_),
  offsetof(::upstox::FeedDefaultTypeInternal, fullfeed_),
  offsetof(::upstox::FeedDefaultTypeInternal, firstlevelwithgreeks_),
  PROTOBUF_FIELD_OFFSET(::upstox::Feed, requestmode_),
  PROTOBUF_FIELD_OFFSET(::upstox::Feed, FeedUnion_),
  PROTOBUF_FIELD_OFFSET(::upstox::MarketInfo_SegmentStatusEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::upstox::MarketInfo_SegmentStatusEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::upstox::MarketInfo_SegmentStatusEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::upstox::MarketInfo_SegmentStatusEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::upstox::MarketInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::upstox::MarketInfo, segmentstatus_),
  PROTOBUF_FIELD_OFFSET(::upstox::FeedResponse_FeedsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::upstox::FeedResponse_FeedsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::upstox::FeedResponse_FeedsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::upstox::FeedResponse_FeedsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::upstox::FeedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::upstox::FeedResponse, type_),
  PROTOBUF_FIELD_OFFSET(::upstox::FeedResponse, feeds_),
  PROTOBUF_FIELD_OFFSET(::upstox::FeedResponse, currentts_),
  PROTOBUF_FIELD_OFFSET(::upstox::FeedResponse, marketinfo_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::upstox::LTPC)},
  { 8, -1, sizeof(::upstox::MarketLevel)},
  { 14, -1, sizeof(::upstox::MarketOHLC)},
  { 20, -1, sizeof(::upstox::Quote)},
  { 29, -1, sizeof(::upstox::OptionGreeks)},
  { 39, -1, sizeof(::upstox::OHLC)},
  { 51, -1, sizeof(::upstox::MarketFullFeed)},
  { 66, -1, sizeof(::upstox::IndexFullFeed)},
  { 73, -1, sizeof(::upstox::FullFeed)},
  { 81, -1, sizeof(::upstox::FirstLevelWithGreeks)},
  { 92, -1, sizeof(::upstox::Feed)},
  { 102, 109, sizeof(::upstox::MarketInfo_SegmentStatusEntry_DoNotUse)},
  { 111, -1, sizeof(::upstox::MarketInfo)},
  { 117, 124, sizeof(::upstox::FeedResponse_FeedsEntry_DoNotUse)},
  { 126, -1, sizeof(::upstox::FeedResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::upstox::_LTPC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::upstox::_MarketLevel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::upstox::_MarketOHLC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::upstox::_Quote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::upstox::_OptionGreeks_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::upstox::_OHLC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::upstox::_MarketFullFeed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::upstox::_IndexFullFeed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::upstox::_FullFeed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::upstox::_FirstLevelWithGreeks_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::upstox::_Feed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::upstox::_MarketInfo_SegmentStatusEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::upstox::_MarketInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::upstox::_FeedResponse_FeedsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::upstox::_FeedResponse_default_instance_),
};

const char descriptor_table_protodef_MarketDataFeedV3_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026MarketDataFeedV3.proto\022\006upstox\",\n\004LTPC"
  "\022\013\n\003ltp\030\001 \001(\001\022\013\n\003ltt\030\002 \001(\003\022\n\n\002cp\030\003 \001(\001\"1"
  "\n\013MarketLevel\022\"\n\013bidAskQuote\030\001 \003(\0132\r.ups"
  "tox.Quote\"(\n\nMarketOHLC\022\032\n\004ohlc\030\001 \003(\0132\014."
  "upstox.OHLC\"\?\n\005Quote\022\014\n\004bidQ\030\001 \001(\003\022\014\n\004bi"
  "dP\030\002 \001(\001\022\014\n\004askQ\030\003 \001(\003\022\014\n\004askP\030\004 \001(\001\"V\n\014"
  "OptionGreeks\022\r\n\005delta\030\001 \001(\001\022\r\n\005theta\030\002 \001"
  "(\001\022\r\n\005gamma\030\003 \001(\001\022\014\n\004vega\030\004 \001(\001\022\013\n\003rho\030\005"
  " \001(\001\"i\n\004OHLC\022\020\n\010interval\030\001 \001(\t\022\014\n\004open\030\002"
  " \001(\001\022\014\n\004high\030\003 \001(\001\022\013\n\003low\030\004 \001(\001\022\r\n\005close"
  "\030\005 \001(\001\022\013\n\003vol\030\006 \001(\003\022\n\n\002ts\030\007 \001(\003\"\366\001\n\016Mark"
  "etFullFeed\022\032\n\004ltpc\030\001 \001(\0132\014.upstox.LTPC\022("
  "\n\013marketLevel\030\002 \001(\0132\023.upstox.MarketLevel"
  "\022*\n\014optionGreeks\030\003 \001(\0132\024.upstox.OptionGr"
  "eeks\022&\n\nmarketOHLC\030\004 \001(\0132\022.upstox.Market"
  "OHLC\022\013\n\003atp\030\005 \001(\001\022\013\n\003vtt\030\006 \001(\003\022\n\n\002oi\030\007 \001"
  "(\001\022\n\n\002iv\030\010 \001(\001\022\013\n\003tbq\030\t \001(\001\022\013\n\003tsq\030\n \001(\001"
  "\"S\n\rIndexFullFeed\022\032\n\004ltpc\030\001 \001(\0132\014.upstox"
  ".LTPC\022&\n\nmarketOHLC\030\002 \001(\0132\022.upstox.Marke"
  "tOHLC\"q\n\010FullFeed\022*\n\010marketFF\030\001 \001(\0132\026.up"
  "stox.MarketFullFeedH\000\022(\n\007indexFF\030\002 \001(\0132\025"
  ".upstox.IndexFullFeedH\000B\017\n\rFullFeedUnion"
  "\"\246\001\n\024FirstLevelWithGreeks\022\032\n\004ltpc\030\001 \001(\0132"
  "\014.upstox.LTPC\022!\n\nfirstDepth\030\002 \001(\0132\r.upst"
  "ox.Quote\022*\n\014optionGreeks\030\003 \001(\0132\024.upstox."
  "OptionGreeks\022\013\n\003vtt\030\004 \001(\003\022\n\n\002oi\030\005 \001(\001\022\n\n"
  "\002iv\030\006 \001(\001\"\277\001\n\004Feed\022\034\n\004ltpc\030\001 \001(\0132\014.upsto"
  "x.LTPCH\000\022$\n\010fullFeed\030\002 \001(\0132\020.upstox.Full"
  "FeedH\000\022<\n\024firstLevelWithGreeks\030\003 \001(\0132\034.u"
  "pstox.FirstLevelWithGreeksH\000\022(\n\013requestM"
  "ode\030\004 \001(\0162\023.upstox.RequestModeB\013\n\tFeedUn"
  "ion\"\226\001\n\nMarketInfo\022<\n\rsegmentStatus\030\001 \003("
  "\0132%.upstox.MarketInfo.SegmentStatusEntry"
  "\032J\n\022SegmentStatusEntry\022\013\n\003key\030\001 \001(\t\022#\n\005v"
  "alue\030\002 \001(\0162\024.upstox.MarketStatus:\0028\001\"\321\001\n"
  "\014FeedResponse\022\032\n\004type\030\001 \001(\0162\014.upstox.Typ"
  "e\022.\n\005feeds\030\002 \003(\0132\037.upstox.FeedResponse.F"
  "eedsEntry\022\021\n\tcurrentTs\030\003 \001(\003\022&\n\nmarketIn"
  "fo\030\004 \001(\0132\022.upstox.MarketInfo\032:\n\nFeedsEnt"
  "ry\022\013\n\003key\030\001 \001(\t\022\033\n\005value\030\002 \001(\0132\014.upstox."
  "Feed:\0028\001*8\n\004Type\022\020\n\014initial_feed\020\000\022\r\n\tli"
  "ve_feed\020\001\022\017\n\013market_info\020\002*E\n\013RequestMod"
  "e\022\010\n\004ltpc\020\000\022\013\n\007full_d5\020\001\022\021\n\roption_greek"
  "s\020\002\022\014\n\010full_d30\020\003*{\n\014MarketStatus\022\022\n\016PRE"
  "_OPEN_START\020\000\022\020\n\014PRE_OPEN_END\020\001\022\017\n\013NORMA"
  "L_OPEN\020\002\022\020\n\014NORMAL_CLOSE\020\003\022\021\n\rCLOSING_ST"
  "ART\020\004\022\017\n\013CLOSING_END\020\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_MarketDataFeedV3_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_MarketDataFeedV3_2eproto_sccs[15] = {
  &scc_info_Feed_MarketDataFeedV3_2eproto.base,
  &scc_info_FeedResponse_MarketDataFeedV3_2eproto.base,
  &scc_info_FeedResponse_FeedsEntry_DoNotUse_MarketDataFeedV3_2eproto.base,
  &scc_info_FirstLevelWithGreeks_MarketDataFeedV3_2eproto.base,
  &scc_info_FullFeed_MarketDataFeedV3_2eproto.base,
  &scc_info_IndexFullFeed_MarketDataFeedV3_2eproto.base,
  &scc_info_LTPC_MarketDataFeedV3_2eproto.base,
  &scc_info_MarketFullFeed_MarketDataFeedV3_2eproto.base,
  &scc_info_MarketInfo_MarketDataFeedV3_2eproto.base,
  &scc_info_MarketInfo_SegmentStatusEntry_DoNotUse_MarketDataFeedV3_2eproto.base,
  &scc_info_MarketLevel_MarketDataFeedV3_2eproto.base,
  &scc_info_MarketOHLC_MarketDataFeedV3_2eproto.base,
  &scc_info_OHLC_MarketDataFeedV3_2eproto.base,
  &scc_info_OptionGreeks_MarketDataFeedV3_2eproto.base,
  &scc_info_Quote_MarketDataFeedV3_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MarketDataFeedV3_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MarketDataFeedV3_2eproto = {
  false, false, descriptor_table_protodef_MarketDataFeedV3_2eproto, "MarketDataFeedV3.proto", 1870,
  &descriptor_table_MarketDataFeedV3_2eproto_once, descriptor_table_MarketDataFeedV3_2eproto_sccs, descriptor_table_MarketDataFeedV3_2eproto_deps, 15, 0,
  schemas, file_default_instances, TableStruct_MarketDataFeedV3_2eproto::offsets,
  file_level_metadata_MarketDataFeedV3_2eproto, 15, file_level_enum_descriptors_MarketDataFeedV3_2eproto, file_level_service_descriptors_MarketDataFeedV3_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_MarketDataFeedV3_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_MarketDataFeedV3_2eproto)), true);
namespace upstox {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MarketDataFeedV3_2eproto);
  return file_level_enum_descriptors_MarketDataFeedV3_2eproto[0];
}
bool Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MarketDataFeedV3_2eproto);
  return file_level_enum_descriptors_MarketDataFeedV3_2eproto[1];
}
bool RequestMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MarketStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MarketDataFeedV3_2eproto);
  return file_level_enum_descriptors_MarketDataFeedV3_2eproto[2];
}
bool MarketStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void LTPC::InitAsDefaultInstance() {
}
class LTPC::_Internal {
 public:
};

LTPC::LTPC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:upstox.LTPC)
}
LTPC::LTPC(const LTPC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ltp_, &from.ltp_,
    static_cast<size_t>(reinterpret_cast<char*>(&cp_) -
    reinterpret_cast<char*>(&ltp_)) + sizeof(cp_));
  // @@protoc_insertion_point(copy_constructor:upstox.LTPC)
}

void LTPC::SharedCtor() {
  ::memset(&ltp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cp_) -
      reinterpret_cast<char*>(&ltp_)) + sizeof(cp_));
}

LTPC::~LTPC() {
  // @@protoc_insertion_point(destructor:upstox.LTPC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LTPC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LTPC::ArenaDtor(void* object) {
  LTPC* _this = reinterpret_cast< LTPC* >(object);
  (void)_this;
}
void LTPC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LTPC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LTPC& LTPC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LTPC_MarketDataFeedV3_2eproto.base);
  return *internal_default_instance();
}


void LTPC::Clear() {
// @@protoc_insertion_point(message_clear_start:upstox.LTPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ltp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cp_) -
      reinterpret_cast<char*>(&ltp_)) + sizeof(cp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LTPC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double ltp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ltp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 ltt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ltt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double cp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          cp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LTPC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:upstox.LTPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double ltp = 1;
  if (!(this->ltp() <= 0 && this->ltp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_ltp(), target);
  }

  // int64 ltt = 2;
  if (this->ltt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_ltt(), target);
  }

  // double cp = 3;
  if (!(this->cp() <= 0 && this->cp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_cp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:upstox.LTPC)
  return target;
}

size_t LTPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:upstox.LTPC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double ltp = 1;
  if (!(this->ltp() <= 0 && this->ltp() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 ltt = 2;
  if (this->ltt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ltt());
  }

  // double cp = 3;
  if (!(this->cp() <= 0 && this->cp() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LTPC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:upstox.LTPC)
  GOOGLE_DCHECK_NE(&from, this);
  const LTPC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LTPC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:upstox.LTPC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:upstox.LTPC)
    MergeFrom(*source);
  }
}

void LTPC::MergeFrom(const LTPC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:upstox.LTPC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.ltp() <= 0 && from.ltp() >= 0)) {
    _internal_set_ltp(from._internal_ltp());
  }
  if (from.ltt() != 0) {
    _internal_set_ltt(from._internal_ltt());
  }
  if (!(from.cp() <= 0 && from.cp() >= 0)) {
    _internal_set_cp(from._internal_cp());
  }
}

void LTPC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:upstox.LTPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTPC::CopyFrom(const LTPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:upstox.LTPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTPC::IsInitialized() const {
  return true;
}

void LTPC::InternalSwap(LTPC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LTPC, cp_)
      + sizeof(LTPC::cp_)
      - PROTOBUF_FIELD_OFFSET(LTPC, ltp_)>(
          reinterpret_cast<char*>(&ltp_),
          reinterpret_cast<char*>(&other->ltp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LTPC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MarketLevel::InitAsDefaultInstance() {
}
class MarketLevel::_Internal {
 public:
};

MarketLevel::MarketLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bidaskquote_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:upstox.MarketLevel)
}
MarketLevel::MarketLevel(const MarketLevel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bidaskquote_(from.bidaskquote_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:upstox.MarketLevel)
}

void MarketLevel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketLevel_MarketDataFeedV3_2eproto.base);
}

MarketLevel::~MarketLevel() {
  // @@protoc_insertion_point(destructor:upstox.MarketLevel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketLevel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MarketLevel::ArenaDtor(void* object) {
  MarketLevel* _this = reinterpret_cast< MarketLevel* >(object);
  (void)_this;
}
void MarketLevel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketLevel& MarketLevel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketLevel_MarketDataFeedV3_2eproto.base);
  return *internal_default_instance();
}


void MarketLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:upstox.MarketLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bidaskquote_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketLevel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .upstox.Quote bidAskQuote = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bidaskquote(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketLevel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:upstox.MarketLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .upstox.Quote bidAskQuote = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bidaskquote_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_bidaskquote(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:upstox.MarketLevel)
  return target;
}

size_t MarketLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:upstox.MarketLevel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .upstox.Quote bidAskQuote = 1;
  total_size += 1UL * this->_internal_bidaskquote_size();
  for (const auto& msg : this->bidaskquote_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketLevel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:upstox.MarketLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketLevel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketLevel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:upstox.MarketLevel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:upstox.MarketLevel)
    MergeFrom(*source);
  }
}

void MarketLevel::MergeFrom(const MarketLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:upstox.MarketLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bidaskquote_.MergeFrom(from.bidaskquote_);
}

void MarketLevel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:upstox.MarketLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketLevel::CopyFrom(const MarketLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:upstox.MarketLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketLevel::IsInitialized() const {
  return true;
}

void MarketLevel::InternalSwap(MarketLevel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bidaskquote_.InternalSwap(&other->bidaskquote_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketLevel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MarketOHLC::InitAsDefaultInstance() {
}
class MarketOHLC::_Internal {
 public:
};

MarketOHLC::MarketOHLC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ohlc_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:upstox.MarketOHLC)
}
MarketOHLC::MarketOHLC(const MarketOHLC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ohlc_(from.ohlc_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:upstox.MarketOHLC)
}

void MarketOHLC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketOHLC_MarketDataFeedV3_2eproto.base);
}

MarketOHLC::~MarketOHLC() {
  // @@protoc_insertion_point(destructor:upstox.MarketOHLC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketOHLC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MarketOHLC::ArenaDtor(void* object) {
  MarketOHLC* _this = reinterpret_cast< MarketOHLC* >(object);
  (void)_this;
}
void MarketOHLC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketOHLC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketOHLC& MarketOHLC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketOHLC_MarketDataFeedV3_2eproto.base);
  return *internal_default_instance();
}


void MarketOHLC::Clear() {
// @@protoc_insertion_point(message_clear_start:upstox.MarketOHLC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ohlc_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketOHLC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .upstox.OHLC ohlc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ohlc(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketOHLC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:upstox.MarketOHLC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .upstox.OHLC ohlc = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ohlc_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ohlc(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:upstox.MarketOHLC)
  return target;
}

size_t MarketOHLC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:upstox.MarketOHLC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .upstox.OHLC ohlc = 1;
  total_size += 1UL * this->_internal_ohlc_size();
  for (const auto& msg : this->ohlc_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketOHLC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:upstox.MarketOHLC)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketOHLC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketOHLC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:upstox.MarketOHLC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:upstox.MarketOHLC)
    MergeFrom(*source);
  }
}

void MarketOHLC::MergeFrom(const MarketOHLC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:upstox.MarketOHLC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ohlc_.MergeFrom(from.ohlc_);
}

void MarketOHLC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:upstox.MarketOHLC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketOHLC::CopyFrom(const MarketOHLC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:upstox.MarketOHLC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketOHLC::IsInitialized() const {
  return true;
}

void MarketOHLC::InternalSwap(MarketOHLC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ohlc_.InternalSwap(&other->ohlc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketOHLC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Quote::InitAsDefaultInstance() {
}
class Quote::_Internal {
 public:
};

Quote::Quote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:upstox.Quote)
}
Quote::Quote(const Quote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bidq_, &from.bidq_,
    static_cast<size_t>(reinterpret_cast<char*>(&askp_) -
    reinterpret_cast<char*>(&bidq_)) + sizeof(askp_));
  // @@protoc_insertion_point(copy_constructor:upstox.Quote)
}

void Quote::SharedCtor() {
  ::memset(&bidq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&askp_) -
      reinterpret_cast<char*>(&bidq_)) + sizeof(askp_));
}

Quote::~Quote() {
  // @@protoc_insertion_point(destructor:upstox.Quote)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Quote::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Quote::ArenaDtor(void* object) {
  Quote* _this = reinterpret_cast< Quote* >(object);
  (void)_this;
}
void Quote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Quote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Quote& Quote::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Quote_MarketDataFeedV3_2eproto.base);
  return *internal_default_instance();
}


void Quote::Clear() {
// @@protoc_insertion_point(message_clear_start:upstox.Quote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bidq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&askp_) -
      reinterpret_cast<char*>(&bidq_)) + sizeof(askp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Quote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 bidQ = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bidq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double bidP = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          bidp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 askQ = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          askq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double askP = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          askp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Quote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:upstox.Quote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 bidQ = 1;
  if (this->bidq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_bidq(), target);
  }

  // double bidP = 2;
  if (!(this->bidp() <= 0 && this->bidp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_bidp(), target);
  }

  // int64 askQ = 3;
  if (this->askq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_askq(), target);
  }

  // double askP = 4;
  if (!(this->askp() <= 0 && this->askp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_askp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:upstox.Quote)
  return target;
}

size_t Quote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:upstox.Quote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 bidQ = 1;
  if (this->bidq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_bidq());
  }

  // double bidP = 2;
  if (!(this->bidp() <= 0 && this->bidp() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 askQ = 3;
  if (this->askq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_askq());
  }

  // double askP = 4;
  if (!(this->askp() <= 0 && this->askp() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Quote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:upstox.Quote)
  GOOGLE_DCHECK_NE(&from, this);
  const Quote* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Quote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:upstox.Quote)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:upstox.Quote)
    MergeFrom(*source);
  }
}

void Quote::MergeFrom(const Quote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:upstox.Quote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bidq() != 0) {
    _internal_set_bidq(from._internal_bidq());
  }
  if (!(from.bidp() <= 0 && from.bidp() >= 0)) {
    _internal_set_bidp(from._internal_bidp());
  }
  if (from.askq() != 0) {
    _internal_set_askq(from._internal_askq());
  }
  if (!(from.askp() <= 0 && from.askp() >= 0)) {
    _internal_set_askp(from._internal_askp());
  }
}

void Quote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:upstox.Quote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quote::CopyFrom(const Quote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:upstox.Quote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quote::IsInitialized() const {
  return true;
}

void Quote::InternalSwap(Quote* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quote, askp_)
      + sizeof(Quote::askp_)
      - PROTOBUF_FIELD_OFFSET(Quote, bidq_)>(
          reinterpret_cast<char*>(&bidq_),
          reinterpret_cast<char*>(&other->bidq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Quote::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OptionGreeks::InitAsDefaultInstance() {
}
class OptionGreeks::_Internal {
 public:
};

OptionGreeks::OptionGreeks(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:upstox.OptionGreeks)
}
OptionGreeks::OptionGreeks(const OptionGreeks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&delta_, &from.delta_,
    static_cast<size_t>(reinterpret_cast<char*>(&rho_) -
    reinterpret_cast<char*>(&delta_)) + sizeof(rho_));
  // @@protoc_insertion_point(copy_constructor:upstox.OptionGreeks)
}

void OptionGreeks::SharedCtor() {
  ::memset(&delta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rho_) -
      reinterpret_cast<char*>(&delta_)) + sizeof(rho_));
}

OptionGreeks::~OptionGreeks() {
  // @@protoc_insertion_point(destructor:upstox.OptionGreeks)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OptionGreeks::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OptionGreeks::ArenaDtor(void* object) {
  OptionGreeks* _this = reinterpret_cast< OptionGreeks* >(object);
  (void)_this;
}
void OptionGreeks::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OptionGreeks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OptionGreeks& OptionGreeks::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OptionGreeks_MarketDataFeedV3_2eproto.base);
  return *internal_default_instance();
}


void OptionGreeks::Clear() {
// @@protoc_insertion_point(message_clear_start:upstox.OptionGreeks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&delta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rho_) -
      reinterpret_cast<char*>(&delta_)) + sizeof(rho_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OptionGreeks::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double delta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          delta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double theta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double gamma = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          gamma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double vega = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          vega_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rho = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          rho_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OptionGreeks::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:upstox.OptionGreeks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double delta = 1;
  if (!(this->delta() <= 0 && this->delta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_delta(), target);
  }

  // double theta = 2;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_theta(), target);
  }

  // double gamma = 3;
  if (!(this->gamma() <= 0 && this->gamma() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_gamma(), target);
  }

  // double vega = 4;
  if (!(this->vega() <= 0 && this->vega() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_vega(), target);
  }

  // double rho = 5;
  if (!(this->rho() <= 0 && this->rho() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_rho(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:upstox.OptionGreeks)
  return target;
}

size_t OptionGreeks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:upstox.OptionGreeks)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double delta = 1;
  if (!(this->delta() <= 0 && this->delta() >= 0)) {
    total_size += 1 + 8;
  }

  // double theta = 2;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    total_size += 1 + 8;
  }

  // double gamma = 3;
  if (!(this->gamma() <= 0 && this->gamma() >= 0)) {
    total_size += 1 + 8;
  }

  // double vega = 4;
  if (!(this->vega() <= 0 && this->vega() >= 0)) {
    total_size += 1 + 8;
  }

  // double rho = 5;
  if (!(this->rho() <= 0 && this->rho() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionGreeks::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:upstox.OptionGreeks)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionGreeks* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OptionGreeks>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:upstox.OptionGreeks)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:upstox.OptionGreeks)
    MergeFrom(*source);
  }
}

void OptionGreeks::MergeFrom(const OptionGreeks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:upstox.OptionGreeks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.delta() <= 0 && from.delta() >= 0)) {
    _internal_set_delta(from._internal_delta());
  }
  if (!(from.theta() <= 0 && from.theta() >= 0)) {
    _internal_set_theta(from._internal_theta());
  }
  if (!(from.gamma() <= 0 && from.gamma() >= 0)) {
    _internal_set_gamma(from._internal_gamma());
  }
  if (!(from.vega() <= 0 && from.vega() >= 0)) {
    _internal_set_vega(from._internal_vega());
  }
  if (!(from.rho() <= 0 && from.rho() >= 0)) {
    _internal_set_rho(from._internal_rho());
  }
}

void OptionGreeks::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:upstox.OptionGreeks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionGreeks::CopyFrom(const OptionGreeks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:upstox.OptionGreeks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionGreeks::IsInitialized() const {
  return true;
}

void OptionGreeks::InternalSwap(OptionGreeks* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OptionGreeks, rho_)
      + sizeof(OptionGreeks::rho_)
      - PROTOBUF_FIELD_OFFSET(OptionGreeks, delta_)>(
          reinterpret_cast<char*>(&delta_),
          reinterpret_cast<char*>(&other->delta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OptionGreeks::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OHLC::InitAsDefaultInstance() {
}
class OHLC::_Internal {
 public:
};

OHLC::OHLC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:upstox.OHLC)
}
OHLC::OHLC(const OHLC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  interval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_interval().empty()) {
    interval_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_interval(),
      GetArena());
  }
  ::memcpy(&open_, &from.open_,
    static_cast<size_t>(reinterpret_cast<char*>(&ts_) -
    reinterpret_cast<char*>(&open_)) + sizeof(ts_));
  // @@protoc_insertion_point(copy_constructor:upstox.OHLC)
}

void OHLC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OHLC_MarketDataFeedV3_2eproto.base);
  interval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) -
      reinterpret_cast<char*>(&open_)) + sizeof(ts_));
}

OHLC::~OHLC() {
  // @@protoc_insertion_point(destructor:upstox.OHLC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OHLC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  interval_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OHLC::ArenaDtor(void* object) {
  OHLC* _this = reinterpret_cast< OHLC* >(object);
  (void)_this;
}
void OHLC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OHLC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OHLC& OHLC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OHLC_MarketDataFeedV3_2eproto.base);
  return *internal_default_instance();
}


void OHLC::Clear() {
// @@protoc_insertion_point(message_clear_start:upstox.OHLC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interval_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) -
      reinterpret_cast<char*>(&open_)) + sizeof(ts_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OHLC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string interval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_interval();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "upstox.OHLC.interval"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double open = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double high = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          high_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double low = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          low_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double close = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          close_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 vol = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          vol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OHLC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:upstox.OHLC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string interval = 1;
  if (this->interval().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interval().data(), static_cast<int>(this->_internal_interval().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "upstox.OHLC.interval");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_interval(), target);
  }

  // double open = 2;
  if (!(this->open() <= 0 && this->open() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_open(), target);
  }

  // double high = 3;
  if (!(this->high() <= 0 && this->high() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_high(), target);
  }

  // double low = 4;
  if (!(this->low() <= 0 && this->low() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_low(), target);
  }

  // double close = 5;
  if (!(this->close() <= 0 && this->close() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_close(), target);
  }

  // int64 vol = 6;
  if (this->vol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_vol(), target);
  }

  // int64 ts = 7;
  if (this->ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:upstox.OHLC)
  return target;
}

size_t OHLC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:upstox.OHLC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string interval = 1;
  if (this->interval().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interval());
  }

  // double open = 2;
  if (!(this->open() <= 0 && this->open() >= 0)) {
    total_size += 1 + 8;
  }

  // double high = 3;
  if (!(this->high() <= 0 && this->high() >= 0)) {
    total_size += 1 + 8;
  }

  // double low = 4;
  if (!(this->low() <= 0 && this->low() >= 0)) {
    total_size += 1 + 8;
  }

  // double close = 5;
  if (!(this->close() <= 0 && this->close() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 vol = 6;
  if (this->vol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_vol());
  }

  // int64 ts = 7;
  if (this->ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OHLC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:upstox.OHLC)
  GOOGLE_DCHECK_NE(&from, this);
  const OHLC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OHLC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:upstox.OHLC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:upstox.OHLC)
    MergeFrom(*source);
  }
}

void OHLC::MergeFrom(const OHLC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:upstox.OHLC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.interval().size() > 0) {
    _internal_set_interval(from._internal_interval());
  }
  if (!(from.open() <= 0 && from.open() >= 0)) {
    _internal_set_open(from._internal_open());
  }
  if (!(from.high() <= 0 && from.high() >= 0)) {
    _internal_set_high(from._internal_high());
  }
  if (!(from.low() <= 0 && from.low() >= 0)) {
    _internal_set_low(from._internal_low());
  }
  if (!(from.close() <= 0 && from.close() >= 0)) {
    _internal_set_close(from._internal_close());
  }
  if (from.vol() != 0) {
    _internal_set_vol(from._internal_vol());
  }
  if (from.ts() != 0) {
    _internal_set_ts(from._internal_ts());
  }
}

void OHLC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:upstox.OHLC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OHLC::CopyFrom(const OHLC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:upstox.OHLC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OHLC::IsInitialized() const {
  return true;
}

void OHLC::InternalSwap(OHLC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  interval_.Swap(&other->interval_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OHLC, ts_)
      + sizeof(OHLC::ts_)
      - PROTOBUF_FIELD_OFFSET(OHLC, open_)>(
          reinterpret_cast<char*>(&open_),
          reinterpret_cast<char*>(&other->open_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OHLC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MarketFullFeed::InitAsDefaultInstance() {
  ::upstox::_MarketFullFeed_default_instance_._instance.get_mutable()->ltpc_ = const_cast< ::upstox::LTPC*>(
      ::upstox::LTPC::internal_default_instance());
  ::upstox::_MarketFullFeed_default_instance_._instance.get_mutable()->marketlevel_ = const_cast< ::upstox::MarketLevel*>(
      ::upstox::MarketLevel::internal_default_instance());
  ::upstox::_MarketFullFeed_default_instance_._instance.get_mutable()->optiongreeks_ = const_cast< ::upstox::OptionGreeks*>(
      ::upstox::OptionGreeks::internal_default_instance());
  ::upstox::_MarketFullFeed_default_instance_._instance.get_mutable()->marketohlc_ = const_cast< ::upstox::MarketOHLC*>(
      ::upstox::MarketOHLC::internal_default_instance());
}
class MarketFullFeed::_Internal {
 public:
  static const ::upstox::LTPC& ltpc(const MarketFullFeed* msg);
  static const ::upstox::MarketLevel& marketlevel(const MarketFullFeed* msg);
  static const ::upstox::OptionGreeks& optiongreeks(const MarketFullFeed* msg);
  static const ::upstox::MarketOHLC& marketohlc(const MarketFullFeed* msg);
};

const ::upstox::LTPC&
MarketFullFeed::_Internal::ltpc(const MarketFullFeed* msg) {
  return *msg->ltpc_;
}
const ::upstox::MarketLevel&
MarketFullFeed::_Internal::marketlevel(const MarketFullFeed* msg) {
  return *msg->marketlevel_;
}
const ::upstox::OptionGreeks&
MarketFullFeed::_Internal::optiongreeks(const MarketFullFeed* msg) {
  return *msg->optiongreeks_;
}
const ::upstox::MarketOHLC&
MarketFullFeed::_Internal::marketohlc(const MarketFullFeed* msg) {
  return *msg->marketohlc_;
}
MarketFullFeed::MarketFullFeed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:upstox.MarketFullFeed)
}
MarketFullFeed::MarketFullFeed(const MarketFullFeed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ltpc()) {
    ltpc_ = new ::upstox::LTPC(*from.ltpc_);
  } else {
    ltpc_ = nullptr;
  }
  if (from._internal_has_marketlevel()) {
    marketlevel_ = new ::upstox::MarketLevel(*from.marketlevel_);
  } else {
    marketlevel_ = nullptr;
  }
  if (from._internal_has_optiongreeks()) {
    optiongreeks_ = new ::upstox::OptionGreeks(*from.optiongreeks_);
  } else {
    optiongreeks_ = nullptr;
  }
  if (from._internal_has_marketohlc()) {
    marketohlc_ = new ::upstox::MarketOHLC(*from.marketohlc_);
  } else {
    marketohlc_ = nullptr;
  }
  ::memcpy(&atp_, &from.atp_,
    static_cast<size_t>(reinterpret_cast<char*>(&tsq_) -
    reinterpret_cast<char*>(&atp_)) + sizeof(tsq_));
  // @@protoc_insertion_point(copy_constructor:upstox.MarketFullFeed)
}

void MarketFullFeed::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketFullFeed_MarketDataFeedV3_2eproto.base);
  ::memset(&ltpc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tsq_) -
      reinterpret_cast<char*>(&ltpc_)) + sizeof(tsq_));
}

MarketFullFeed::~MarketFullFeed() {
  // @@protoc_insertion_point(destructor:upstox.MarketFullFeed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketFullFeed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ltpc_;
  if (this != internal_default_instance()) delete marketlevel_;
  if (this != internal_default_instance()) delete optiongreeks_;
  if (this != internal_default_instance()) delete marketohlc_;
}

void MarketFullFeed::ArenaDtor(void* object) {
  MarketFullFeed* _this = reinterpret_cast< MarketFullFeed* >(object);
  (void)_this;
}
void MarketFullFeed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketFullFeed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketFullFeed& MarketFullFeed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketFullFeed_MarketDataFeedV3_2eproto.base);
  return *internal_default_instance();
}


void MarketFullFeed::Clear() {
// @@protoc_insertion_point(message_clear_start:upstox.MarketFullFeed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && ltpc_ != nullptr) {
    delete ltpc_;
  }
  ltpc_ = nullptr;
  if (GetArena() == nullptr && marketlevel_ != nullptr) {
    delete marketlevel_;
  }
  marketlevel_ = nullptr;
  if (GetArena() == nullptr && optiongreeks_ != nullptr) {
    delete optiongreeks_;
  }
  optiongreeks_ = nullptr;
  if (GetArena() == nullptr && marketohlc_ != nullptr) {
    delete marketohlc_;
  }
  marketohlc_ = nullptr;
  ::memset(&atp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tsq_) -
      reinterpret_cast<char*>(&atp_)) + sizeof(tsq_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketFullFeed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .upstox.LTPC ltpc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ltpc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .upstox.MarketLevel marketLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_marketlevel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .upstox.OptionGreeks optionGreeks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_optiongreeks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .upstox.MarketOHLC marketOHLC = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_marketohlc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double atp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          atp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 vtt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          vtt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double oi = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          oi_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double iv = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          iv_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double tbq = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          tbq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double tsq = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          tsq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketFullFeed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:upstox.MarketFullFeed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .upstox.LTPC ltpc = 1;
  if (this->has_ltpc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ltpc(this), target, stream);
  }

  // .upstox.MarketLevel marketLevel = 2;
  if (this->has_marketlevel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::marketlevel(this), target, stream);
  }

  // .upstox.OptionGreeks optionGreeks = 3;
  if (this->has_optiongreeks()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::optiongreeks(this), target, stream);
  }

  // .upstox.MarketOHLC marketOHLC = 4;
  if (this->has_marketohlc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::marketohlc(this), target, stream);
  }

  // double atp = 5;
  if (!(this->atp() <= 0 && this->atp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_atp(), target);
  }

  // int64 vtt = 6;
  if (this->vtt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_vtt(), target);
  }

  // double oi = 7;
  if (!(this->oi() <= 0 && this->oi() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_oi(), target);
  }

  // double iv = 8;
  if (!(this->iv() <= 0 && this->iv() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_iv(), target);
  }

  // double tbq = 9;
  if (!(this->tbq() <= 0 && this->tbq() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_tbq(), target);
  }

  // double tsq = 10;
  if (!(this->tsq() <= 0 && this->tsq() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_tsq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:upstox.MarketFullFeed)
  return target;
}

size_t MarketFullFeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:upstox.MarketFullFeed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .upstox.LTPC ltpc = 1;
  if (this->has_ltpc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ltpc_);
  }

  // .upstox.MarketLevel marketLevel = 2;
  if (this->has_marketlevel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *marketlevel_);
  }

  // .upstox.OptionGreeks optionGreeks = 3;
  if (this->has_optiongreeks()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optiongreeks_);
  }

  // .upstox.MarketOHLC marketOHLC = 4;
  if (this->has_marketohlc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *marketohlc_);
  }

  // double atp = 5;
  if (!(this->atp() <= 0 && this->atp() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 vtt = 6;
  if (this->vtt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_vtt());
  }

  // double oi = 7;
  if (!(this->oi() <= 0 && this->oi() >= 0)) {
    total_size += 1 + 8;
  }

  // double iv = 8;
  if (!(this->iv() <= 0 && this->iv() >= 0)) {
    total_size += 1 + 8;
  }

  // double tbq = 9;
  if (!(this->tbq() <= 0 && this->tbq() >= 0)) {
    total_size += 1 + 8;
  }

  // double tsq = 10;
  if (!(this->tsq() <= 0 && this->tsq() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketFullFeed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:upstox.MarketFullFeed)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketFullFeed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketFullFeed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:upstox.MarketFullFeed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:upstox.MarketFullFeed)
    MergeFrom(*source);
  }
}

void MarketFullFeed::MergeFrom(const MarketFullFeed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:upstox.MarketFullFeed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ltpc()) {
    _internal_mutable_ltpc()->::upstox::LTPC::MergeFrom(from._internal_ltpc());
  }
  if (from.has_marketlevel()) {
    _internal_mutable_marketlevel()->::upstox::MarketLevel::MergeFrom(from._internal_marketlevel());
  }
  if (from.has_optiongreeks()) {
    _internal_mutable_optiongreeks()->::upstox::OptionGreeks::MergeFrom(from._internal_optiongreeks());
  }
  if (from.has_marketohlc()) {
    _internal_mutable_marketohlc()->::upstox::MarketOHLC::MergeFrom(from._internal_marketohlc());
  }
  if (!(from.atp() <= 0 && from.atp() >= 0)) {
    _internal_set_atp(from._internal_atp());
  }
  if (from.vtt() != 0) {
    _internal_set_vtt(from._internal_vtt());
  }
  if (!(from.oi() <= 0 && from.oi() >= 0)) {
    _internal_set_oi(from._internal_oi());
  }
  if (!(from.iv() <= 0 && from.iv() >= 0)) {
    _internal_set_iv(from._internal_iv());
  }
  if (!(from.tbq() <= 0 && from.tbq() >= 0)) {
    _internal_set_tbq(from._internal_tbq());
  }
  if (!(from.tsq() <= 0 && from.tsq() >= 0)) {
    _internal_set_tsq(from._internal_tsq());
  }
}

void MarketFullFeed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:upstox.MarketFullFeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketFullFeed::CopyFrom(const MarketFullFeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:upstox.MarketFullFeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketFullFeed::IsInitialized() const {
  return true;
}

void MarketFullFeed::InternalSwap(MarketFullFeed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketFullFeed, tsq_)
      + sizeof(MarketFullFeed::tsq_)
      - PROTOBUF_FIELD_OFFSET(MarketFullFeed, ltpc_)>(
          reinterpret_cast<char*>(&ltpc_),
          reinterpret_cast<char*>(&other->ltpc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketFullFeed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IndexFullFeed::InitAsDefaultInstance() {
  ::upstox::_IndexFullFeed_default_instance_._instance.get_mutable()->ltpc_ = const_cast< ::upstox::LTPC*>(
      ::upstox::LTPC::internal_default_instance());
  ::upstox::_IndexFullFeed_default_instance_._instance.get_mutable()->marketohlc_ = const_cast< ::upstox::MarketOHLC*>(
      ::upstox::MarketOHLC::internal_default_instance());
}
class IndexFullFeed::_Internal {
 public:
  static const ::upstox::LTPC& ltpc(const IndexFullFeed* msg);
  static const ::upstox::MarketOHLC& marketohlc(const IndexFullFeed* msg);
};

const ::upstox::LTPC&
IndexFullFeed::_Internal::ltpc(const IndexFullFeed* msg) {
  return *msg->ltpc_;
}
const ::upstox::MarketOHLC&
IndexFullFeed::_Internal::marketohlc(const IndexFullFeed* msg) {
  return *msg->marketohlc_;
}
IndexFullFeed::IndexFullFeed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:upstox.IndexFullFeed)
}
IndexFullFeed::IndexFullFeed(const IndexFullFeed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ltpc()) {
    ltpc_ = new ::upstox::LTPC(*from.ltpc_);
  } else {
    ltpc_ = nullptr;
  }
  if (from._internal_has_marketohlc()) {
    marketohlc_ = new ::upstox::MarketOHLC(*from.marketohlc_);
  } else {
    marketohlc_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:upstox.IndexFullFeed)
}

void IndexFullFeed::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IndexFullFeed_MarketDataFeedV3_2eproto.base);
  ::memset(&ltpc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&marketohlc_) -
      reinterpret_cast<char*>(&ltpc_)) + sizeof(marketohlc_));
}

IndexFullFeed::~IndexFullFeed() {
  // @@protoc_insertion_point(destructor:upstox.IndexFullFeed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IndexFullFeed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ltpc_;
  if (this != internal_default_instance()) delete marketohlc_;
}

void IndexFullFeed::ArenaDtor(void* object) {
  IndexFullFeed* _this = reinterpret_cast< IndexFullFeed* >(object);
  (void)_this;
}
void IndexFullFeed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IndexFullFeed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IndexFullFeed& IndexFullFeed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IndexFullFeed_MarketDataFeedV3_2eproto.base);
  return *internal_default_instance();
}


void IndexFullFeed::Clear() {
// @@protoc_insertion_point(message_clear_start:upstox.IndexFullFeed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && ltpc_ != nullptr) {
    delete ltpc_;
  }
  ltpc_ = nullptr;
  if (GetArena() == nullptr && marketohlc_ != nullptr) {
    delete marketohlc_;
  }
  marketohlc_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexFullFeed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .upstox.LTPC ltpc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ltpc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .upstox.MarketOHLC marketOHLC = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_marketohlc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IndexFullFeed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:upstox.IndexFullFeed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .upstox.LTPC ltpc = 1;
  if (this->has_ltpc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ltpc(this), target, stream);
  }

  // .upstox.MarketOHLC marketOHLC = 2;
  if (this->has_marketohlc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::marketohlc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:upstox.IndexFullFeed)
  return target;
}

size_t IndexFullFeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:upstox.IndexFullFeed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .upstox.LTPC ltpc = 1;
  if (this->has_ltpc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ltpc_);
  }

  // .upstox.MarketOHLC marketOHLC = 2;
  if (this->has_marketohlc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *marketohlc_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndexFullFeed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:upstox.IndexFullFeed)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexFullFeed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IndexFullFeed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:upstox.IndexFullFeed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:upstox.IndexFullFeed)
    MergeFrom(*source);
  }
}

void IndexFullFeed::MergeFrom(const IndexFullFeed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:upstox.IndexFullFeed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ltpc()) {
    _internal_mutable_ltpc()->::upstox::LTPC::MergeFrom(from._internal_ltpc());
  }
  if (from.has_marketohlc()) {
    _internal_mutable_marketohlc()->::upstox::MarketOHLC::MergeFrom(from._internal_marketohlc());
  }
}

void IndexFullFeed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:upstox.IndexFullFeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexFullFeed::CopyFrom(const IndexFullFeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:upstox.IndexFullFeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexFullFeed::IsInitialized() const {
  return true;
}

void IndexFullFeed::InternalSwap(IndexFullFeed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndexFullFeed, marketohlc_)
      + sizeof(IndexFullFeed::marketohlc_)
      - PROTOBUF_FIELD_OFFSET(IndexFullFeed, ltpc_)>(
          reinterpret_cast<char*>(&ltpc_),
          reinterpret_cast<char*>(&other->ltpc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexFullFeed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FullFeed::InitAsDefaultInstance() {
  ::upstox::_FullFeed_default_instance_.marketff_ = const_cast< ::upstox::MarketFullFeed*>(
      ::upstox::MarketFullFeed::internal_default_instance());
  ::upstox::_FullFeed_default_instance_.indexff_ = const_cast< ::upstox::IndexFullFeed*>(
      ::upstox::IndexFullFeed::internal_default_instance());
}
class FullFeed::_Internal {
 public:
  static const ::upstox::MarketFullFeed& marketff(const FullFeed* msg);
  static const ::upstox::IndexFullFeed& indexff(const FullFeed* msg);
};

const ::upstox::MarketFullFeed&
FullFeed::_Internal::marketff(const FullFeed* msg) {
  return *msg->FullFeedUnion_.marketff_;
}
const ::upstox::IndexFullFeed&
FullFeed::_Internal::indexff(const FullFeed* msg) {
  return *msg->FullFeedUnion_.indexff_;
}
void FullFeed::set_allocated_marketff(::upstox::MarketFullFeed* marketff) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_FullFeedUnion();
  if (marketff) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(marketff);
    if (message_arena != submessage_arena) {
      marketff = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, marketff, submessage_arena);
    }
    set_has_marketff();
    FullFeedUnion_.marketff_ = marketff;
  }
  // @@protoc_insertion_point(field_set_allocated:upstox.FullFeed.marketFF)
}
void FullFeed::set_allocated_indexff(::upstox::IndexFullFeed* indexff) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_FullFeedUnion();
  if (indexff) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(indexff);
    if (message_arena != submessage_arena) {
      indexff = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, indexff, submessage_arena);
    }
    set_has_indexff();
    FullFeedUnion_.indexff_ = indexff;
  }
  // @@protoc_insertion_point(field_set_allocated:upstox.FullFeed.indexFF)
}
FullFeed::FullFeed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:upstox.FullFeed)
}
FullFeed::FullFeed(const FullFeed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_FullFeedUnion();
  switch (from.FullFeedUnion_case()) {
    case kMarketFF: {
      _internal_mutable_marketff()->::upstox::MarketFullFeed::MergeFrom(from._internal_marketff());
      break;
    }
    case kIndexFF: {
      _internal_mutable_indexff()->::upstox::IndexFullFeed::MergeFrom(from._internal_indexff());
      break;
    }
    case FULLFEEDUNION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:upstox.FullFeed)
}

void FullFeed::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FullFeed_MarketDataFeedV3_2eproto.base);
  clear_has_FullFeedUnion();
}

FullFeed::~FullFeed() {
  // @@protoc_insertion_point(destructor:upstox.FullFeed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FullFeed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_FullFeedUnion()) {
    clear_FullFeedUnion();
  }
}

void FullFeed::ArenaDtor(void* object) {
  FullFeed* _this = reinterpret_cast< FullFeed* >(object);
  (void)_this;
}
void FullFeed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FullFeed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FullFeed& FullFeed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FullFeed_MarketDataFeedV3_2eproto.base);
  return *internal_default_instance();
}


void FullFeed::clear_FullFeedUnion() {
// @@protoc_insertion_point(one_of_clear_start:upstox.FullFeed)
  switch (FullFeedUnion_case()) {
    case kMarketFF: {
      if (GetArena() == nullptr) {
        delete FullFeedUnion_.marketff_;
      }
      break;
    }
    case kIndexFF: {
      if (GetArena() == nullptr) {
        delete FullFeedUnion_.indexff_;
      }
      break;
    }
    case FULLFEEDUNION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FULLFEEDUNION_NOT_SET;
}


void FullFeed::Clear() {
// @@protoc_insertion_point(message_clear_start:upstox.FullFeed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_FullFeedUnion();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FullFeed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .upstox.MarketFullFeed marketFF = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_marketff(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .upstox.IndexFullFeed indexFF = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_indexff(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FullFeed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:upstox.FullFeed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .upstox.MarketFullFeed marketFF = 1;
  if (_internal_has_marketff()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::marketff(this), target, stream);
  }

  // .upstox.IndexFullFeed indexFF = 2;
  if (_internal_has_indexff()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::indexff(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:upstox.FullFeed)
  return target;
}

size_t FullFeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:upstox.FullFeed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (FullFeedUnion_case()) {
    // .upstox.MarketFullFeed marketFF = 1;
    case kMarketFF: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *FullFeedUnion_.marketff_);
      break;
    }
    // .upstox.IndexFullFeed indexFF = 2;
    case kIndexFF: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *FullFeedUnion_.indexff_);
      break;
    }
    case FULLFEEDUNION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FullFeed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:upstox.FullFeed)
  GOOGLE_DCHECK_NE(&from, this);
  const FullFeed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FullFeed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:upstox.FullFeed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:upstox.FullFeed)
    MergeFrom(*source);
  }
}

void FullFeed::MergeFrom(const FullFeed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:upstox.FullFeed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.FullFeedUnion_case()) {
    case kMarketFF: {
      _internal_mutable_marketff()->::upstox::MarketFullFeed::MergeFrom(from._internal_marketff());
      break;
    }
    case kIndexFF: {
      _internal_mutable_indexff()->::upstox::IndexFullFeed::MergeFrom(from._internal_indexff());
      break;
    }
    case FULLFEEDUNION_NOT_SET: {
      break;
    }
  }
}

void FullFeed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:upstox.FullFeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FullFeed::CopyFrom(const FullFeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:upstox.FullFeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullFeed::IsInitialized() const {
  return true;
}

void FullFeed::InternalSwap(FullFeed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(FullFeedUnion_, other->FullFeedUnion_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FullFeed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirstLevelWithGreeks::InitAsDefaultInstance() {
  ::upstox::_FirstLevelWithGreeks_default_instance_._instance.get_mutable()->ltpc_ = const_cast< ::upstox::LTPC*>(
      ::upstox::LTPC::internal_default_instance());
  ::upstox::_FirstLevelWithGreeks_default_instance_._instance.get_mutable()->firstdepth_ = const_cast< ::upstox::Quote*>(
      ::upstox::Quote::internal_default_instance());
  ::upstox::_FirstLevelWithGreeks_default_instance_._instance.get_mutable()->optiongreeks_ = const_cast< ::upstox::OptionGreeks*>(
      ::upstox::OptionGreeks::internal_default_instance());
}
class FirstLevelWithGreeks::_Internal {
 public:
  static const ::upstox::LTPC& ltpc(const FirstLevelWithGreeks* msg);
  static const ::upstox::Quote& firstdepth(const FirstLevelWithGreeks* msg);
  static const ::upstox::OptionGreeks& optiongreeks(const FirstLevelWithGreeks* msg);
};

const ::upstox::LTPC&
FirstLevelWithGreeks::_Internal::ltpc(const FirstLevelWithGreeks* msg) {
  return *msg->ltpc_;
}
const ::upstox::Quote&
FirstLevelWithGreeks::_Internal::firstdepth(const FirstLevelWithGreeks* msg) {
  return *msg->firstdepth_;
}
const ::upstox::OptionGreeks&
FirstLevelWithGreeks::_Internal::optiongreeks(const FirstLevelWithGreeks* msg) {
  return *msg->optiongreeks_;
}
FirstLevelWithGreeks::FirstLevelWithGreeks(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:upstox.FirstLevelWithGreeks)
}
FirstLevelWithGreeks::FirstLevelWithGreeks(const FirstLevelWithGreeks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ltpc()) {
    ltpc_ = new ::upstox::LTPC(*from.ltpc_);
  } else {
    ltpc_ = nullptr;
  }
  if (from._internal_has_firstdepth()) {
    firstdepth_ = new ::upstox::Quote(*from.firstdepth_);
  } else {
    firstdepth_ = nullptr;
  }
  if (from._internal_has_optiongreeks()) {
    optiongreeks_ = new ::upstox::OptionGreeks(*from.optiongreeks_);
  } else {
    optiongreeks_ = nullptr;
  }
  ::memcpy(&vtt_, &from.vtt_,
    static_cast<size_t>(reinterpret_cast<char*>(&iv_) -
    reinterpret_cast<char*>(&vtt_)) + sizeof(iv_));
  // @@protoc_insertion_point(copy_constructor:upstox.FirstLevelWithGreeks)
}

void FirstLevelWithGreeks::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirstLevelWithGreeks_MarketDataFeedV3_2eproto.base);
  ::memset(&ltpc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iv_) -
      reinterpret_cast<char*>(&ltpc_)) + sizeof(iv_));
}

FirstLevelWithGreeks::~FirstLevelWithGreeks() {
  // @@protoc_insertion_point(destructor:upstox.FirstLevelWithGreeks)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FirstLevelWithGreeks::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ltpc_;
  if (this != internal_default_instance()) delete firstdepth_;
  if (this != internal_default_instance()) delete optiongreeks_;
}

void FirstLevelWithGreeks::ArenaDtor(void* object) {
  FirstLevelWithGreeks* _this = reinterpret_cast< FirstLevelWithGreeks* >(object);
  (void)_this;
}
void FirstLevelWithGreeks::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FirstLevelWithGreeks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirstLevelWithGreeks& FirstLevelWithGreeks::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirstLevelWithGreeks_MarketDataFeedV3_2eproto.base);
  return *internal_default_instance();
}


void FirstLevelWithGreeks::Clear() {
// @@protoc_insertion_point(message_clear_start:upstox.FirstLevelWithGreeks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && ltpc_ != nullptr) {
    delete ltpc_;
  }
  ltpc_ = nullptr;
  if (GetArena() == nullptr && firstdepth_ != nullptr) {
    delete firstdepth_;
  }
  firstdepth_ = nullptr;
  if (GetArena() == nullptr && optiongreeks_ != nullptr) {
    delete optiongreeks_;
  }
  optiongreeks_ = nullptr;
  ::memset(&vtt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iv_) -
      reinterpret_cast<char*>(&vtt_)) + sizeof(iv_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FirstLevelWithGreeks::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .upstox.LTPC ltpc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ltpc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .upstox.Quote firstDepth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_firstdepth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .upstox.OptionGreeks optionGreeks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_optiongreeks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 vtt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          vtt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double oi = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          oi_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double iv = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          iv_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirstLevelWithGreeks::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:upstox.FirstLevelWithGreeks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .upstox.LTPC ltpc = 1;
  if (this->has_ltpc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ltpc(this), target, stream);
  }

  // .upstox.Quote firstDepth = 2;
  if (this->has_firstdepth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::firstdepth(this), target, stream);
  }

  // .upstox.OptionGreeks optionGreeks = 3;
  if (this->has_optiongreeks()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::optiongreeks(this), target, stream);
  }

  // int64 vtt = 4;
  if (this->vtt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_vtt(), target);
  }

  // double oi = 5;
  if (!(this->oi() <= 0 && this->oi() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_oi(), target);
  }

  // double iv = 6;
  if (!(this->iv() <= 0 && this->iv() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_iv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:upstox.FirstLevelWithGreeks)
  return target;
}

size_t FirstLevelWithGreeks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:upstox.FirstLevelWithGreeks)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .upstox.LTPC ltpc = 1;
  if (this->has_ltpc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ltpc_);
  }

  // .upstox.Quote firstDepth = 2;
  if (this->has_firstdepth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *firstdepth_);
  }

  // .upstox.OptionGreeks optionGreeks = 3;
  if (this->has_optiongreeks()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optiongreeks_);
  }

  // int64 vtt = 4;
  if (this->vtt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_vtt());
  }

  // double oi = 5;
  if (!(this->oi() <= 0 && this->oi() >= 0)) {
    total_size += 1 + 8;
  }

  // double iv = 6;
  if (!(this->iv() <= 0 && this->iv() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirstLevelWithGreeks::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:upstox.FirstLevelWithGreeks)
  GOOGLE_DCHECK_NE(&from, this);
  const FirstLevelWithGreeks* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirstLevelWithGreeks>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:upstox.FirstLevelWithGreeks)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:upstox.FirstLevelWithGreeks)
    MergeFrom(*source);
  }
}

void FirstLevelWithGreeks::MergeFrom(const FirstLevelWithGreeks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:upstox.FirstLevelWithGreeks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ltpc()) {
    _internal_mutable_ltpc()->::upstox::LTPC::MergeFrom(from._internal_ltpc());
  }
  if (from.has_firstdepth()) {
    _internal_mutable_firstdepth()->::upstox::Quote::MergeFrom(from._internal_firstdepth());
  }
  if (from.has_optiongreeks()) {
    _internal_mutable_optiongreeks()->::upstox::OptionGreeks::MergeFrom(from._internal_optiongreeks());
  }
  if (from.vtt() != 0) {
    _internal_set_vtt(from._internal_vtt());
  }
  if (!(from.oi() <= 0 && from.oi() >= 0)) {
    _internal_set_oi(from._internal_oi());
  }
  if (!(from.iv() <= 0 && from.iv() >= 0)) {
    _internal_set_iv(from._internal_iv());
  }
}

void FirstLevelWithGreeks::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:upstox.FirstLevelWithGreeks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirstLevelWithGreeks::CopyFrom(const FirstLevelWithGreeks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:upstox.FirstLevelWithGreeks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirstLevelWithGreeks::IsInitialized() const {
  return true;
}

void FirstLevelWithGreeks::InternalSwap(FirstLevelWithGreeks* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FirstLevelWithGreeks, iv_)
      + sizeof(FirstLevelWithGreeks::iv_)
      - PROTOBUF_FIELD_OFFSET(FirstLevelWithGreeks, ltpc_)>(
          reinterpret_cast<char*>(&ltpc_),
          reinterpret_cast<char*>(&other->ltpc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FirstLevelWithGreeks::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Feed::InitAsDefaultInstance() {
  ::upstox::_Feed_default_instance_.ltpc_ = const_cast< ::upstox::LTPC*>(
      ::upstox::LTPC::internal_default_instance());
  ::upstox::_Feed_default_instance_.fullfeed_ = const_cast< ::upstox::FullFeed*>(
      ::upstox::FullFeed::internal_default_instance());
  ::upstox::_Feed_default_instance_.firstlevelwithgreeks_ = const_cast< ::upstox::FirstLevelWithGreeks*>(
      ::upstox::FirstLevelWithGreeks::internal_default_instance());
}
class Feed::_Internal {
 public:
  static const ::upstox::LTPC& ltpc(const Feed* msg);
  static const ::upstox::FullFeed& fullfeed(const Feed* msg);
  static const ::upstox::FirstLevelWithGreeks& firstlevelwithgreeks(const Feed* msg);
};

const ::upstox::LTPC&
Feed::_Internal::ltpc(const Feed* msg) {
  return *msg->FeedUnion_.ltpc_;
}
const ::upstox::FullFeed&
Feed::_Internal::fullfeed(const Feed* msg) {
  return *msg->FeedUnion_.fullfeed_;
}
const ::upstox::FirstLevelWithGreeks&
Feed::_Internal::firstlevelwithgreeks(const Feed* msg) {
  return *msg->FeedUnion_.firstlevelwithgreeks_;
}
void Feed::set_allocated_ltpc(::upstox::LTPC* ltpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_FeedUnion();
  if (ltpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ltpc);
    if (message_arena != submessage_arena) {
      ltpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ltpc, submessage_arena);
    }
    set_has_ltpc();
    FeedUnion_.ltpc_ = ltpc;
  }
  // @@protoc_insertion_point(field_set_allocated:upstox.Feed.ltpc)
}
void Feed::set_allocated_fullfeed(::upstox::FullFeed* fullfeed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_FeedUnion();
  if (fullfeed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fullfeed);
    if (message_arena != submessage_arena) {
      fullfeed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fullfeed, submessage_arena);
    }
    set_has_fullfeed();
    FeedUnion_.fullfeed_ = fullfeed;
  }
  // @@protoc_insertion_point(field_set_allocated:upstox.Feed.fullFeed)
}
void Feed::set_allocated_firstlevelwithgreeks(::upstox::FirstLevelWithGreeks* firstlevelwithgreeks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_FeedUnion();
  if (firstlevelwithgreeks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(firstlevelwithgreeks);
    if (message_arena != submessage_arena) {
      firstlevelwithgreeks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, firstlevelwithgreeks, submessage_arena);
    }
    set_has_firstlevelwithgreeks();
    FeedUnion_.firstlevelwithgreeks_ = firstlevelwithgreeks;
  }
  // @@protoc_insertion_point(field_set_allocated:upstox.Feed.firstLevelWithGreeks)
}
Feed::Feed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:upstox.Feed)
}
Feed::Feed(const Feed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  requestmode_ = from.requestmode_;
  clear_has_FeedUnion();
  switch (from.FeedUnion_case()) {
    case kLtpc: {
      _internal_mutable_ltpc()->::upstox::LTPC::MergeFrom(from._internal_ltpc());
      break;
    }
    case kFullFeed: {
      _internal_mutable_fullfeed()->::upstox::FullFeed::MergeFrom(from._internal_fullfeed());
      break;
    }
    case kFirstLevelWithGreeks: {
      _internal_mutable_firstlevelwithgreeks()->::upstox::FirstLevelWithGreeks::MergeFrom(from._internal_firstlevelwithgreeks());
      break;
    }
    case FEEDUNION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:upstox.Feed)
}

void Feed::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Feed_MarketDataFeedV3_2eproto.base);
  requestmode_ = 0;
  clear_has_FeedUnion();
}

Feed::~Feed() {
  // @@protoc_insertion_point(destructor:upstox.Feed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Feed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_FeedUnion()) {
    clear_FeedUnion();
  }
}

void Feed::ArenaDtor(void* object) {
  Feed* _this = reinterpret_cast< Feed* >(object);
  (void)_this;
}
void Feed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Feed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Feed& Feed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Feed_MarketDataFeedV3_2eproto.base);
  return *internal_default_instance();
}


void Feed::clear_FeedUnion() {
// @@protoc_insertion_point(one_of_clear_start:upstox.Feed)
  switch (FeedUnion_case()) {
    case kLtpc: {
      if (GetArena() == nullptr) {
        delete FeedUnion_.ltpc_;
      }
      break;
    }
    case kFullFeed: {
      if (GetArena() == nullptr) {
        delete FeedUnion_.fullfeed_;
      }
      break;
    }
    case kFirstLevelWithGreeks: {
      if (GetArena() == nullptr) {
        delete FeedUnion_.firstlevelwithgreeks_;
      }
      break;
    }
    case FEEDUNION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FEEDUNION_NOT_SET;
}


void Feed::Clear() {
// @@protoc_insertion_point(message_clear_start:upstox.Feed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requestmode_ = 0;
  clear_FeedUnion();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Feed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .upstox.LTPC ltpc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ltpc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .upstox.FullFeed fullFeed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fullfeed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .upstox.FirstLevelWithGreeks firstLevelWithGreeks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_firstlevelwithgreeks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .upstox.RequestMode requestMode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_requestmode(static_cast<::upstox::RequestMode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Feed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:upstox.Feed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .upstox.LTPC ltpc = 1;
  if (_internal_has_ltpc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ltpc(this), target, stream);
  }

  // .upstox.FullFeed fullFeed = 2;
  if (_internal_has_fullfeed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::fullfeed(this), target, stream);
  }

  // .upstox.FirstLevelWithGreeks firstLevelWithGreeks = 3;
  if (_internal_has_firstlevelwithgreeks()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::firstlevelwithgreeks(this), target, stream);
  }

  // .upstox.RequestMode requestMode = 4;
  if (this->requestmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_requestmode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:upstox.Feed)
  return target;
}

size_t Feed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:upstox.Feed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .upstox.RequestMode requestMode = 4;
  if (this->requestmode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_requestmode());
  }

  switch (FeedUnion_case()) {
    // .upstox.LTPC ltpc = 1;
    case kLtpc: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *FeedUnion_.ltpc_);
      break;
    }
    // .upstox.FullFeed fullFeed = 2;
    case kFullFeed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *FeedUnion_.fullfeed_);
      break;
    }
    // .upstox.FirstLevelWithGreeks firstLevelWithGreeks = 3;
    case kFirstLevelWithGreeks: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *FeedUnion_.firstlevelwithgreeks_);
      break;
    }
    case FEEDUNION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Feed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:upstox.Feed)
  GOOGLE_DCHECK_NE(&from, this);
  const Feed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Feed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:upstox.Feed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:upstox.Feed)
    MergeFrom(*source);
  }
}

void Feed::MergeFrom(const Feed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:upstox.Feed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.requestmode() != 0) {
    _internal_set_requestmode(from._internal_requestmode());
  }
  switch (from.FeedUnion_case()) {
    case kLtpc: {
      _internal_mutable_ltpc()->::upstox::LTPC::MergeFrom(from._internal_ltpc());
      break;
    }
    case kFullFeed: {
      _internal_mutable_fullfeed()->::upstox::FullFeed::MergeFrom(from._internal_fullfeed());
      break;
    }
    case kFirstLevelWithGreeks: {
      _internal_mutable_firstlevelwithgreeks()->::upstox::FirstLevelWithGreeks::MergeFrom(from._internal_firstlevelwithgreeks());
      break;
    }
    case FEEDUNION_NOT_SET: {
      break;
    }
  }
}

void Feed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:upstox.Feed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Feed::CopyFrom(const Feed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:upstox.Feed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feed::IsInitialized() const {
  return true;
}

void Feed::InternalSwap(Feed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(requestmode_, other->requestmode_);
  swap(FeedUnion_, other->FeedUnion_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Feed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

MarketInfo_SegmentStatusEntry_DoNotUse::MarketInfo_SegmentStatusEntry_DoNotUse() {}
MarketInfo_SegmentStatusEntry_DoNotUse::MarketInfo_SegmentStatusEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MarketInfo_SegmentStatusEntry_DoNotUse::MergeFrom(const MarketInfo_SegmentStatusEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MarketInfo_SegmentStatusEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MarketInfo_SegmentStatusEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void MarketInfo::InitAsDefaultInstance() {
}
class MarketInfo::_Internal {
 public:
};

MarketInfo::MarketInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  segmentstatus_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:upstox.MarketInfo)
}
MarketInfo::MarketInfo(const MarketInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  segmentstatus_.MergeFrom(from.segmentstatus_);
  // @@protoc_insertion_point(copy_constructor:upstox.MarketInfo)
}

void MarketInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketInfo_MarketDataFeedV3_2eproto.base);
}

MarketInfo::~MarketInfo() {
  // @@protoc_insertion_point(destructor:upstox.MarketInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MarketInfo::ArenaDtor(void* object) {
  MarketInfo* _this = reinterpret_cast< MarketInfo* >(object);
  (void)_this;
}
void MarketInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketInfo& MarketInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketInfo_MarketDataFeedV3_2eproto.base);
  return *internal_default_instance();
}


void MarketInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:upstox.MarketInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segmentstatus_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .upstox.MarketStatus> segmentStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&segmentstatus_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:upstox.MarketInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .upstox.MarketStatus> segmentStatus = 1;
  if (!this->_internal_segmentstatus().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::upstox::MarketStatus >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "upstox.MarketInfo.SegmentStatusEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_segmentstatus().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_segmentstatus().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::upstox::MarketStatus >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::upstox::MarketStatus >::const_iterator
          it = this->_internal_segmentstatus().begin();
          it != this->_internal_segmentstatus().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MarketInfo_SegmentStatusEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::upstox::MarketStatus >::const_iterator
          it = this->_internal_segmentstatus().begin();
          it != this->_internal_segmentstatus().end(); ++it) {
        target = MarketInfo_SegmentStatusEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:upstox.MarketInfo)
  return target;
}

size_t MarketInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:upstox.MarketInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .upstox.MarketStatus> segmentStatus = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_segmentstatus_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::upstox::MarketStatus >::const_iterator
      it = this->_internal_segmentstatus().begin();
      it != this->_internal_segmentstatus().end(); ++it) {
    total_size += MarketInfo_SegmentStatusEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:upstox.MarketInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:upstox.MarketInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:upstox.MarketInfo)
    MergeFrom(*source);
  }
}

void MarketInfo::MergeFrom(const MarketInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:upstox.MarketInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segmentstatus_.MergeFrom(from.segmentstatus_);
}

void MarketInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:upstox.MarketInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketInfo::CopyFrom(const MarketInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:upstox.MarketInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketInfo::IsInitialized() const {
  return true;
}

void MarketInfo::InternalSwap(MarketInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  segmentstatus_.Swap(&other->segmentstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

FeedResponse_FeedsEntry_DoNotUse::FeedResponse_FeedsEntry_DoNotUse() {}
FeedResponse_FeedsEntry_DoNotUse::FeedResponse_FeedsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FeedResponse_FeedsEntry_DoNotUse::MergeFrom(const FeedResponse_FeedsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FeedResponse_FeedsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void FeedResponse_FeedsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void FeedResponse::InitAsDefaultInstance() {
  ::upstox::_FeedResponse_default_instance_._instance.get_mutable()->marketinfo_ = const_cast< ::upstox::MarketInfo*>(
      ::upstox::MarketInfo::internal_default_instance());
}
class FeedResponse::_Internal {
 public:
  static const ::upstox::MarketInfo& marketinfo(const FeedResponse* msg);
};

const ::upstox::MarketInfo&
FeedResponse::_Internal::marketinfo(const FeedResponse* msg) {
  return *msg->marketinfo_;
}
FeedResponse::FeedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  feeds_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:upstox.FeedResponse)
}
FeedResponse::FeedResponse(const FeedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  feeds_.MergeFrom(from.feeds_);
  if (from._internal_has_marketinfo()) {
    marketinfo_ = new ::upstox::MarketInfo(*from.marketinfo_);
  } else {
    marketinfo_ = nullptr;
  }
  ::memcpy(&currentts_, &from.currentts_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&currentts_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:upstox.FeedResponse)
}

void FeedResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FeedResponse_MarketDataFeedV3_2eproto.base);
  ::memset(&marketinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&marketinfo_)) + sizeof(type_));
}

FeedResponse::~FeedResponse() {
  // @@protoc_insertion_point(destructor:upstox.FeedResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FeedResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete marketinfo_;
}

void FeedResponse::ArenaDtor(void* object) {
  FeedResponse* _this = reinterpret_cast< FeedResponse* >(object);
  (void)_this;
}
void FeedResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FeedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FeedResponse& FeedResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FeedResponse_MarketDataFeedV3_2eproto.base);
  return *internal_default_instance();
}


void FeedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:upstox.FeedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feeds_.Clear();
  if (GetArena() == nullptr && marketinfo_ != nullptr) {
    delete marketinfo_;
  }
  marketinfo_ = nullptr;
  ::memset(&currentts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&currentts_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .upstox.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::upstox::Type>(val));
        } else goto handle_unusual;
        continue;
      // map<string, .upstox.Feed> feeds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&feeds_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 currentTs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          currentts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .upstox.MarketInfo marketInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_marketinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FeedResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:upstox.FeedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .upstox.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // map<string, .upstox.Feed> feeds = 2;
  if (!this->_internal_feeds().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::upstox::Feed >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "upstox.FeedResponse.FeedsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_feeds().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_feeds().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::upstox::Feed >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::upstox::Feed >::const_iterator
          it = this->_internal_feeds().begin();
          it != this->_internal_feeds().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = FeedResponse_FeedsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::upstox::Feed >::const_iterator
          it = this->_internal_feeds().begin();
          it != this->_internal_feeds().end(); ++it) {
        target = FeedResponse_FeedsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int64 currentTs = 3;
  if (this->currentts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_currentts(), target);
  }

  // .upstox.MarketInfo marketInfo = 4;
  if (this->has_marketinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::marketinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:upstox.FeedResponse)
  return target;
}

size_t FeedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:upstox.FeedResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .upstox.Feed> feeds = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_feeds_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::upstox::Feed >::const_iterator
      it = this->_internal_feeds().begin();
      it != this->_internal_feeds().end(); ++it) {
    total_size += FeedResponse_FeedsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .upstox.MarketInfo marketInfo = 4;
  if (this->has_marketinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *marketinfo_);
  }

  // int64 currentTs = 3;
  if (this->currentts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_currentts());
  }

  // .upstox.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeedResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:upstox.FeedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FeedResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FeedResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:upstox.FeedResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:upstox.FeedResponse)
    MergeFrom(*source);
  }
}

void FeedResponse::MergeFrom(const FeedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:upstox.FeedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feeds_.MergeFrom(from.feeds_);
  if (from.has_marketinfo()) {
    _internal_mutable_marketinfo()->::upstox::MarketInfo::MergeFrom(from._internal_marketinfo());
  }
  if (from.currentts() != 0) {
    _internal_set_currentts(from._internal_currentts());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void FeedResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:upstox.FeedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeedResponse::CopyFrom(const FeedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:upstox.FeedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedResponse::IsInitialized() const {
  return true;
}

void FeedResponse::InternalSwap(FeedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  feeds_.Swap(&other->feeds_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FeedResponse, type_)
      + sizeof(FeedResponse::type_)
      - PROTOBUF_FIELD_OFFSET(FeedResponse, marketinfo_)>(
          reinterpret_cast<char*>(&marketinfo_),
          reinterpret_cast<char*>(&other->marketinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FeedResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace upstox
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::upstox::LTPC* Arena::CreateMaybeMessage< ::upstox::LTPC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::upstox::LTPC >(arena);
}
template<> PROTOBUF_NOINLINE ::upstox::MarketLevel* Arena::CreateMaybeMessage< ::upstox::MarketLevel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::upstox::MarketLevel >(arena);
}
template<> PROTOBUF_NOINLINE ::upstox::MarketOHLC* Arena::CreateMaybeMessage< ::upstox::MarketOHLC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::upstox::MarketOHLC >(arena);
}
template<> PROTOBUF_NOINLINE ::upstox::Quote* Arena::CreateMaybeMessage< ::upstox::Quote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::upstox::Quote >(arena);
}
template<> PROTOBUF_NOINLINE ::upstox::OptionGreeks* Arena::CreateMaybeMessage< ::upstox::OptionGreeks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::upstox::OptionGreeks >(arena);
}
template<> PROTOBUF_NOINLINE ::upstox::OHLC* Arena::CreateMaybeMessage< ::upstox::OHLC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::upstox::OHLC >(arena);
}
template<> PROTOBUF_NOINLINE ::upstox::MarketFullFeed* Arena::CreateMaybeMessage< ::upstox::MarketFullFeed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::upstox::MarketFullFeed >(arena);
}
template<> PROTOBUF_NOINLINE ::upstox::IndexFullFeed* Arena::CreateMaybeMessage< ::upstox::IndexFullFeed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::upstox::IndexFullFeed >(arena);
}
template<> PROTOBUF_NOINLINE ::upstox::FullFeed* Arena::CreateMaybeMessage< ::upstox::FullFeed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::upstox::FullFeed >(arena);
}
template<> PROTOBUF_NOINLINE ::upstox::FirstLevelWithGreeks* Arena::CreateMaybeMessage< ::upstox::FirstLevelWithGreeks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::upstox::FirstLevelWithGreeks >(arena);
}
template<> PROTOBUF_NOINLINE ::upstox::Feed* Arena::CreateMaybeMessage< ::upstox::Feed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::upstox::Feed >(arena);
}
template<> PROTOBUF_NOINLINE ::upstox::MarketInfo_SegmentStatusEntry_DoNotUse* Arena::CreateMaybeMessage< ::upstox::MarketInfo_SegmentStatusEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::upstox::MarketInfo_SegmentStatusEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::upstox::MarketInfo* Arena::CreateMaybeMessage< ::upstox::MarketInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::upstox::MarketInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::upstox::FeedResponse_FeedsEntry_DoNotUse* Arena::CreateMaybeMessage< ::upstox::FeedResponse_FeedsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::upstox::FeedResponse_FeedsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::upstox::FeedResponse* Arena::CreateMaybeMessage< ::upstox::FeedResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::upstox::FeedResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
